<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BUG和WO只能留一个</title>
    <url>/Jmins0.github.io/2022/09/19/BUG/</url>
    <content><![CDATA[<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a><code>hexo</code></h2><ol>
<li><code>hexo d</code>失败</li>
</ol>
<ul>
<li><p>报错：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">unable</span> <span class="string">to</span> <span class="string">access</span> <span class="attr">&#x27;https://github.com/0Jmins0/Jmins0.github.io.git/&#x27;:</span> <span class="attr">Failed to connect to 127.0.0.1 port 7890 after 2069 ms:</span> <span class="string">Connection</span> <span class="string">refuse`</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>
</li>
<li><p>解决</p>
<ul>
<li><p>取消代理：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">--unset</span> <span class="string">http.proxy</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">--unset</span> <span class="string">https.proxy</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置代理</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">http.proxy</span> <span class="string">http://127.0.0.1:7890</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">https.proxy</span> <span class="string">http://127.0.0.1:7890</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ol start="2">
<li><p><code>sprint boot</code>   实现身份验证时返回 403</p>
<ul>
<li><p>报错</p>
<p><code>authenticate = authenticationManager.authenticate(authenticationToken);</code></p>
<p>一直卡在这句话，一直找验证哪里的问题，用户名或者密码的错误</p>
</li>
<li><p>解决</p>
<p>验证失败也有可能是数据库方面的错误，比如<code>mysql</code>不分大小写，在 <code>pojo</code>里面写变量的时候，一定要都是小写的。</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Blog!</title>
    <url>/Jmins0.github.io/2022/07/28/Hello_Blog/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p><em>斜体</em></p>
<p><strong>粗体文字</strong></p>
<p><em><strong>粗斜体</strong></em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello Blog!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>start</tag>
      </tags>
  </entry>
  <entry>
    <title>DP 刷题</title>
    <url>/Jmins0.github.io/2022/07/29/DP/</url>
    <content><![CDATA[<h1 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h1><h2 id="Task-Computing"><a href="#Task-Computing" class="headerlink" title="Task Computing"></a><strong>Task Computing</strong></h2><span id="more"></span>

<p><a href="https://ac.nowcoder.com/acm/contest/33189/A">题目连接</a></p>
<p>As it says, Time is Money, Efficiency is Life. A client has a computing task waiting for uploading to the cloud servers. However, due to the resource limits and many other tasks, a task usually cannot be worked on a single server but multiple servers, one after another. You, as an employee of a cloud server provider who specializes in task allocation, need to select several servers from a limited number of cloud servers to perform calculations. We know that even the same servers will perform differently in different environments.</p>
<p>There are nn cloud servers available in the vicinity of the client’s region numbered from $1$ to $n$. The ii-th cloud server has two parameters: $w_i$ and $p_i$, which indicate the computing power and transmission efficiency of that server, respectively. The supervisor requires that each task must be computed by exactly $m$ of these servers. The client’s computational task is not parallelizable, so you must sequence the work of the $m$ servers to maximize the total computational efficiency. We define the total computational efficiency as follows:<br>$\sum_{i&#x3D;1}^m {w_i} \prod_{j&#x3D;0}^{i-1} {p_i}$</p>
<p><strong>输入描述</strong></p>
<p>The first line contains two integers $n$,$m$ ($1 \le n \le 10_{5}$ , $1 \le m \le {min(n,20)}$) denoting the number of cloud servers and servers that you have to select.</p>
<p>The second line contains $n$ integers $w_1$,$w_2$,$\ldots$, $w_n$,($1 \le {w_i} \le 10_{9}$), denoting the servers’ computing power.</p>
<p>The third line contains $n$ integers $q_1$,$q_2$,$\ldots$, $q_n$ ($8000 \le q_i \le 12000$)<br>where $p_i$ &#x3D;$\frac {q_i}{10000}$ denotes the ii-th server’s transmission efficiency.</p>
<p><strong>输出描述</strong></p>
<p>Output a float number denoting the maximal total computational efficiency. Your answer is considered correct if the relative or absolute error between yours and the standard solution is not greater than $10^{-6}$</p>
<p><strong>样例</strong>1</p>
<p><strong>输入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 2</span><br><span class="line">1 2 3 4 5 </span><br><span class="line">12000 11000 10000 9000 8000</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8.500000000</span><br></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p> <strong>1.首先，每个机器选取的先后顺序会影响其价值，先对其进行排序。</strong></p>
<blockquote>
<p>设两个机器分别为 $x,y$,</p>
<p>当$x$在前，$y$在后的价值为 : $w_x * p_k + w_y * p_x * p_k$</p>
<p>当$y$在前，$y$在后的价值为 : $w_y * p_k + w_x * p_y * p_k$</p>
<p>令 式1&gt;式2 得 : </p>
<p>$w_x + w_y * p_x &gt; w_y + w_x * p_y$，按照该式子排序</p>
</blockquote>
<p><strong>2.排序后，不论从前到后还是从后到前，均为一个有顺序的子序列，所以前后方向不重要。</strong></p>
<p><strong>3.越靠后面选择的，$p$的影响更大。</strong></p>
<blockquote>
<p>设三个设备$1,2,3$，则价值为</p>
<p>$w_1 + w_2 * p_1 + w_3 * p_1 * p_2 &#x3D; p_1 * (w_2 + w_3 * p_2) + w_1$</p>
<p>以此类推<br>因此从最后选的开始更新，价值越小，排序越靠后，越先更新，即$(n~1)$</p>
</blockquote>
<p><strong>4.dp方程 $f[i][k]$ 表示考虑到 第 i 个， 装了 m 个的最大值</strong></p>
<blockquote>
<p>转移方程: $f[i][k]&#x3D;max(f[i][k],f[i+1][k-1] * p[i] + w[i])$</p>
</blockquote>
<h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">double</span> w,p;</span><br><span class="line">&#125;no[MAXN];</span><br><span class="line"><span class="type">double</span> f[MAXN][<span class="number">30</span>],P[<span class="number">30</span>][MAXN];</span><br><span class="line"><span class="type">bool</span> <span class="title function_">cmp</span><span class="params">(node x,node y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (x.w+x.p*y.w)&gt;(y.w+x.w*y.p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;no[i].w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;no[i].p,no[i].p/=<span class="number">10000</span>;</span><br><span class="line">    sort(no+<span class="number">1</span>,no+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=m;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][k]=max(f[i][k],no[i].w+f[i+<span class="number">1</span>][k<span class="number">-1</span>]*no[i].p);</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=m;k++) f[i][k]=max(f[i][k],f[i+<span class="number">1</span>][k]);       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,f[<span class="number">1</span>][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h1><h2 id="P1681-最大正方形-二"><a href="#P1681-最大正方形-二" class="headerlink" title="P1681 最大正方形-二"></a>P1681 最大正方形-二</h2><p><strong><a href="https://www.luogu.com.cn/problem/P1681">题目连接</a></strong></p>
<h3 id="CODE-1"><a href="#CODE-1" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> f[MAXN][MAXN][<span class="number">2</span>],a[MAXN][MAXN]; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> p=<span class="built_in">min</span>(n,m);</span><br><span class="line">	<span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> L=<span class="number">2</span>;L&lt;=p;L++)</span><br><span class="line">	&#123;</span><br><span class="line">		t=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=n-L+<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=m-L+<span class="number">1</span>;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(L==<span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>((a[i][j]==<span class="number">0</span>&amp;&amp;a[i+<span class="number">1</span>][j+<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;a[i+<span class="number">1</span>][j]==<span class="number">1</span>&amp;&amp;a[i][j+<span class="number">1</span>]==<span class="number">1</span>)||(a[i][j]==<span class="number">1</span>&amp;&amp;a[i+<span class="number">1</span>][j+<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;a[i+<span class="number">1</span>][j]==<span class="number">0</span>&amp;&amp;a[i][j+<span class="number">1</span>]==<span class="number">0</span>))</span><br><span class="line">					&#123;</span><br><span class="line">						f[i][j][L%<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				f[i][j][L%<span class="number">2</span>]=f[i][j][(L<span class="number">-1</span>)%<span class="number">2</span>]&amp;&amp;f[i+<span class="number">1</span>][j][(L<span class="number">-1</span>)%<span class="number">2</span>]&amp;&amp;f[i][j+<span class="number">1</span>][(L<span class="number">-1</span>)%<span class="number">2</span>]&amp;&amp;f[i+<span class="number">1</span>][j+<span class="number">1</span>][(L<span class="number">-1</span>)%<span class="number">2</span>];</span><br><span class="line">				<span class="keyword">if</span>(f[i][j][L%<span class="number">2</span>])</span><br><span class="line">				&#123;ans=L;t=<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//cout&lt;&lt;L&lt;&lt;&quot; &quot;&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">if</span>(t!=<span class="number">1</span>) L=p+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="数位DP"><a href="#数位DP" class="headerlink" title="数位DP"></a>数位DP</h1><h2 id="数字计数问题"><a href="#数字计数问题" class="headerlink" title="数字计数问题"></a>数字计数问题</h2><p><strong><a href="https://www.luogu.com.cn/problem/P2602">题目连接</a></strong></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>设计一个 $Count$ 函数，用来统计$ [1,num] $中，$x$ 的个数，</p>
<p>则每一个数码的答案就是 $Count(b,x)- Count(a-1,x)$，类似于前缀和的想法。</p>
<p><strong>其他函数解释</strong></p>
<p>$pow10(x)$ ，用来求 $10^x$。</p>
<p>$get(q,L,R)$, 用来求某个数中，处在$[L,R]$位置上的数值为多少。</p>
<p><strong>Count函数</strong></p>
<p>假设求数字 $abcdefg$ 中 $d$ 位置 $x$ 的个数（先不考虑$0$）</p>
<p>分两种情况：</p>
<ol>
<li><p>前面选取 $[000,abc-1]$（$0$ 则是 $[001,abc-1]$），后面可以随便选取，即$[000,efg]$，总数：$ans+&#x3D;abc*1000$。</p>
</li>
<li><p>当前面选取 $abc$，则要继续分类讨论 $d$ 与 $x$ 的大小关系</p>
<p>1). 当 $d&lt;x$ 时，数字不在范围内，不符合要求</p>
<p>2). 当 $d&#x3D;x$ 时，后面可取 $[000,efg]$，即 $ans+&#x3D;efg+1$</p>
<p>3). 当 $d&gt;x$ 是，后面可取 $[000,999]$，即  $ans+&#x3D;1000$</p>
</li>
</ol>
<p>最后，对于每一个数字，循环一下每一个位置，就是的 $Count$ 的值了。</p>
<p><strong>记得开 $long long$ ! ! !</strong></p>
<h3 id="CODE-2"><a href="#CODE-2" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">pow10</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//if(x&lt;0) return 1;</span></span><br><span class="line">	ll res=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(x--) </span><br><span class="line">	&#123;</span><br><span class="line">		res*=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">get</span><span class="params">(vector&lt;<span class="type">int</span>&gt; q,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=r;i&gt;=l;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		res=res*<span class="number">10</span>+q[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Count</span><span class="params">(ll p,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; num;</span><br><span class="line">	<span class="keyword">while</span>(p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> t=p%<span class="number">10</span>;</span><br><span class="line">		num.<span class="built_in">push_back</span>(t);</span><br><span class="line">		p/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> n=num.<span class="built_in">size</span>();</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;i==n<span class="number">-1</span>) <span class="keyword">continue</span>;<span class="comment">//0不能是第一个数 </span></span><br><span class="line">		<span class="keyword">if</span>(x!=<span class="number">0</span>&amp;&amp;(i&lt;n<span class="number">-1</span>)) ans+=<span class="built_in">pow10</span>(i)*<span class="built_in">get</span>(num,i+<span class="number">1</span>,n<span class="number">-1</span>);<span class="comment">//情况1</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(i&lt;n<span class="number">-1</span>) ans+=<span class="built_in">pow10</span>(i)*(<span class="built_in">get</span>(num,i+<span class="number">1</span>,n<span class="number">-1</span>)<span class="number">-1</span>);情况<span class="number">1</span>（<span class="number">0</span>）</span><br><span class="line">		<span class="keyword">if</span>(num[i]&gt;x) ans+=<span class="built_in">pow10</span>(i);<span class="comment">//情况2.3</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(num[i]==x) ans+=<span class="built_in">get</span>(num,<span class="number">0</span>,i<span class="number">-1</span>)+<span class="number">1</span>; <span class="comment">//情况2.2</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll a,b;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;b) <span class="built_in">swap</span>(a,b); </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ll suma=<span class="built_in">Count</span>(a<span class="number">-1</span>,i);</span><br><span class="line">		ll sumb=<span class="built_in">Count</span>(b,i);</span><br><span class="line">		cout&lt;&lt;sumb-suma&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>爪哇</title>
    <url>/Jmins0.github.io/2022/09/19/Java/</url>
    <content><![CDATA[<h1 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h1><h2 id="第01章-语言概述"><a href="#第01章-语言概述" class="headerlink" title="第01章  语言概述"></a>第01章  语言概述</h2><ol>
<li><p>谈谈你过去学习编程语言的方法、经验和教训。</p>
<p>学习过C++和Python， 基本方法是学习简单语法，尝试做简单的题目，这样能够很快的熟悉一门语言。而后在尝试写一些简答的项目，比如Python的爬虫数据分析等。</p>
</li>
<li><p>高级语言的编译型和解释型语言的编译执行过程有什么区别？</p>
<p>高级语言编译一次性全部编译成机器码，解释性是一句一句转成机器码</p>
<span id="more"></span>
</li>
<li><p>Java语言都有哪些特点？与C, C++, Python有何不同？</p>
<p>Java是完全的面向对象编程</p>
</li>
<li><p>Java实现跨平台的原理是什么？</p>
<p>通过java虚拟机在系统平台上运行的，而不同平台有不同的虚拟机。具体流程：</p>
<p>源文件(.java)—&gt;字节码文件(.class)(二进制文件)—–&gt; 解释—-&gt;Unix,Win,Linux等机器</p>
</li>
<li><p>JDK、JRE、JVM分别是什么的简称，它们之间有何联系和区别？</p>
<ul>
<li>JDK（Java Development Kit）：是 Java 语言的软件开发工具包，主要用于移动设备、嵌入式设备上的Java应用程序。JDK是整个Java开发的核心。</li>
<li>JRE（Java Runtime Environment）：是指Java的运行环境，是可以在其上运行、测试和传输应用程序的Java平台。</li>
<li>JVM（Java Virtual Machine）：是java虚拟机，是一种用于计算设备的规范，它是一个虚构出来的计算机，引入JVM后，Java语言在不同平台上运行时不需要重新编译。JVM是Java跨平台的核心。</li>
<li>联系<ul>
<li>JDK包含了java的运行环境（JRE）和Java工具。</li>
<li>JRE包含了一个Java虚拟机（JVM）以及一些标准的类别函数库。</li>
</ul>
</li>
<li>区别：<ul>
<li>JDK和JRE区别：在 <code>bin</code>文件夹下会发现，JDK有 <code>javac.exe</code>而JRE里面没有， <code>javac</code>指令是用来将 <code>java</code>文件编译成 <code>class</code>文件的，这是开发者需要的，而用户（只需要运行的人）是不需要的。JDK还有 <code>jar.exe, javadoc.exe</code>等等用于开发的可执行指令文件。这也证实了一个是开发环境（JDK），一个是运行环境（JRE）；</li>
<li>JRE和JVM区别：JVM并不代表就可以执行 <code>class</code>了，JVM执行 <code>.class</code>还需要JRE下的 <code>lib</code>类库的支持，尤其是 <code>rt.jar</code>。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="第02章-语言基础"><a href="#第02章-语言基础" class="headerlink" title="第02章  语言基础"></a>第02章  语言基础</h2><ol>
<li><p><code>Java</code>包含哪两大类数据类型？其中基本类型的每种类型的取值范围和默认值分别是什么？请编程验证。</p>
<ol>
<li>基本数据类型<ol>
<li>整数类型</li>
<li>浮点类型</li>
<li>字符类型</li>
<li>布尔类型</li>
</ol>
</li>
<li>引用数据类型<ol>
<li>类类型</li>
<li>接口类型</li>
<li>数组类型</li>
</ol>
</li>
<li>验证：</li>
</ol>
<p><img src="5.png"></p>
</li>
<li><p><code>Java</code>在什么情况会发生整型溢出？请举例说明，并给出解决方案。</p>
<ol>
<li>超出数据类型的范围</li>
<li>解决方法：<ol>
<li>换成更大范围的类型</li>
<li>手写高精度算法</li>
</ol>
</li>
</ol>
</li>
<li><p><code>Java</code>基本类型的包装类分别是哪些？其高频区间数据缓存范围分别是什么？请选择一种包装类型编程验证其数据缓存特性。</p>
<table>
<thead>
<tr>
<th>基本数据类型</th>
<th>包装类</th>
<th>字节数</th>
<th>位数</th>
<th>默认值</th>
<th>数据范围</th>
<th>高频区间数据缓存范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
<td>1</td>
<td>8</td>
<td>0</td>
<td></td>
<td>$[-128,127]$</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
<td>2</td>
<td>16</td>
<td>0</td>
<td>$[-32768,32767]$</td>
<td>$[-128,127]$</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
<td>4</td>
<td>32</td>
<td>0</td>
<td>$[-2^{31}, 2^{31}-1]$</td>
<td>$[-128,127]$</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
<td>8</td>
<td>64</td>
<td>0L</td>
<td>$[-2^{63},2^{63}-1]$</td>
<td>$[-128,127]$</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
<td>4</td>
<td>32</td>
<td>0.0f</td>
<td></td>
<td>无缓存</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
<td>8</td>
<td>64</td>
<td>0,0d</td>
<td></td>
<td>无huancub</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
<td>1</td>
<td>8</td>
<td>false</td>
<td></td>
<td></td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
<td>2</td>
<td>16</td>
<td>‘\u0000’</td>
<td></td>
<td>$[0,127]$</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">i3 == i4 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">i3 == i4 <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//比较指向的对象是否一致</span></span><br><span class="line"><span class="comment">//逻辑比较请用equal</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>什么是自动装箱，什么是自动拆箱，请举例说明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer varInteger=<span class="number">100</span>;<span class="comment">//自动装箱</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">integer varInteger=Integer.valueOf(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> varInt=varInteger;<span class="comment">//自动拆箱</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="type">int</span> varInt=varInteger.intValue();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>int</code> 与 <code>Integer</code>有什么区别，它们之间的相互转化是怎样的？请通过 <code>JDK</code>文档自主学习 <code>Integer</code>类，对主要方法进行测试。</p>
<ol>
<li><p><code>Integer</code> 是 <code>int</code> 的包装类，默认值分别为 <code>null</code> 和 <code>0</code></p>
</li>
<li><p><code>Integer</code> 需要实例化才可以使用， <code>int</code> 不需要。（不包括自动拆箱装箱）</p>
</li>
<li><p><code>int-&gt;Integer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">66</span>; Integer A=<span class="keyword">new</span> <span class="title class_">Integer</span>(a);</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">Integer A=Integer.valueOf(a);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Integer-&gt;int</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer A=<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">66</span>);</span><br><span class="line"><span class="type">int</span> a=A.intValue();</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>逻辑运算符 <code>&amp;</code>和 <code>&amp;&amp;</code>的区别是什么？逻辑运算符 <code>&amp;</code>与位运算符 <code>&amp;</code>的区别是什么？</p>
<ol>
<li><code>&amp;&amp;</code> 是短路判断语句，只要前半个为错误，就不会判断后面的语句了</li>
<li><code>&amp;</code> 会将所有语句都跑一边，看是否存在错误。</li>
<li>两者比较， <code>&amp;&amp;</code> 更高效。</li>
<li>作为逻辑运算符，两边为表达式</li>
<li>作为为运算符，两边为数字</li>
</ol>
</li>
<li><p><code>Java</code>语言中可以采用什么语句跳出多重循环？请举例说明</p>
<ul>
<li><p><code>break</code> 跳出当层循环</p>
</li>
<li><p><code>continue</code>  跳出当次循环</p>
</li>
<li><p>跳回到标签位置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">post:</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+j&gt;=<span class="number">5</span>) <span class="keyword">break</span> post;</span><br><span class="line">            <span class="comment">//System.out.println(i+j);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>请总结 <code>Java</code>语言与 <code>C/C++</code>在基本数据类型、运算符、表达式、控制语句方面的不同。</p>
<ol>
<li><p>布尔常量的 <code>true false</code> 和 <code>1 0</code> 不等价，不可直接运算。</p>
</li>
<li><p>字符串作为对象，有自己的方法和属性。 <code>C/C++</code> 则是 <code>\\0</code> 结束的字符数组</p>
</li>
<li><p>变量未赋值有默认值，而 <code>C/C++</code> 是不确定的。</p>
</li>
<li><p>不支持自动强制类型转换，需手动转换。</p>
</li>
<li><p>有支持多线程的库， <code>C/C++</code> 需要自己写。</p>
</li>
<li><p>前者是先编译，后解释执行，后者是纯编译型，速度后者更快，但是移植型前者更好。</p>
</li>
<li><p>借鉴博客连接：</p>
<p><a href="https://www.cnblogs.com/orange-CC/p/12298995.html">orange-C</a></p>
</li>
</ol>
</li>
</ol>
<h2 id="第06章-继承与多态"><a href="#第06章-继承与多态" class="headerlink" title="第06章  继承与多态"></a>第06章  继承与多态</h2><ol>
<li><p>实验：利用IDE的debug功能给P5示例的 <code>new</code>语句设置断点，使用单步调试 <code>（step into/step over）</code>跟踪对象实例化（初始化）的执行顺序，并总结该过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AddClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,z=<span class="number">0</span>;</span><br><span class="line">    AddClass (<span class="type">int</span> x) &#123;<span class="built_in">this</span>.x = x;&#125;</span><br><span class="line">    AddClass (<span class="type">int</span> x,<span class="type">int</span> y) &#123;<span class="built_in">this</span>(x);<span class="built_in">this</span>.y = y;&#125;</span><br><span class="line">    AddClass (<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z) &#123; <span class="built_in">this</span>(x,y); <span class="built_in">this</span>.z = z; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">()</span> &#123;<span class="keyword">return</span> x+y+z;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunAddClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        AddClass p1=<span class="keyword">new</span> <span class="title class_">AddClass</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>访问三变量构造函数</li>
<li>通过 <code>this(x,y)</code> 调用两变量构造函数</li>
<li>同理，调用一变量构造函数</li>
<li>给变量 <code>x</code> 赋值</li>
<li>返回 两变量构造函数 给 <code>y</code> 赋值</li>
<li>返回 三变量构造函数 给 <code>z</code> 赋值</li>
</ol>
</li>
<li><p>实验：利用IDE的 <code>debug</code> 功能给P12，P13示例的 <code>new</code>语句设置断点，使用单步调试 <code>（step into/step over）</code>跟踪子类对象实例化（初始化）的执行顺序，并总结该过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SonAddClass</span> <span class="keyword">extends</span> <span class="title class_">AddClass</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">    SonAddClass (<span class="type">int</span> x) &#123;<span class="built_in">super</span>(x);a=x+<span class="number">7</span>;&#125;</span><br><span class="line">    SonAddClass (<span class="type">int</span> x,<span class="type">int</span> y)&#123;<span class="built_in">super</span>(x,y);    a=x+<span class="number">5</span>;   b=y+<span class="number">5</span>;&#125;</span><br><span class="line">    SonAddClass (<span class="type">int</span> x, <span class="type">int</span> y,<span class="type">int</span> z)&#123; <span class="built_in">super</span>(x,y,z); a=x+<span class="number">4</span>; b=y+<span class="number">4</span>;c=z+<span class="number">4</span>; </span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        SonAddClass p1=<span class="keyword">new</span> <span class="title class_">SonAddClass</span> (<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>访问三变量子构造函数。</li>
<li>通过 <code>super</code> 访问父类三变量构造函数。</li>
<li>同上文顺序给父类三变量赋值</li>
<li>返回子类构造函数，给子类变量赋值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//隐式</span></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pare</span> &#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">3</span>;</span><br><span class="line">    Pare()&#123; System.out.println(<span class="string">&quot;call super()&quot;</span>); &#125;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Construct</span> <span class="keyword">extends</span> <span class="title class_">Pare</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    Construct()&#123;System.out.println(<span class="string">&quot;execute Construct()&quot;</span>); &#125;</span><br><span class="line">    Construct(<span class="type">int</span> num)&#123; <span class="built_in">this</span>(); <span class="comment">//如果注释掉该句呢？</span></span><br><span class="line">        System.out.println(<span class="string">&quot;execute Construct(int)&quot;</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Construct</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Construct</span>(<span class="number">9</span>);</span><br><span class="line">        System.out.println(ct.i);&#125;&#125;</span><br><span class="line"><span class="comment">//注释前</span></span><br><span class="line">call <span class="title function_">super</span><span class="params">()</span></span><br><span class="line">execute <span class="title function_">Construct</span><span class="params">()</span></span><br><span class="line">execute <span class="title function_">Construct</span><span class="params">(<span class="type">int</span>)</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注释后</span></span><br><span class="line">call <span class="title function_">super</span><span class="params">()</span></span><br><span class="line">execute <span class="title function_">Construct</span><span class="params">(<span class="type">int</span>)</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>分析P7示例的程序执行过程，画出程序执行的内存布局。(蒙的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> y=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Printme</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;x=&quot;</span>+x+<span class="string">&quot; y=&quot;</span>+y);</span><br><span class="line">        System.out.println(<span class="string">&quot;class name: &quot;</span>+getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AA</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Printme</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> z=<span class="built_in">super</span>.x+<span class="number">6</span>;</span><br><span class="line">        <span class="built_in">super</span>.x = <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">super</span>.Printme();</span><br><span class="line">        System.out.println(<span class="string">&quot;I am an &quot;</span>+getClass().getName());</span><br><span class="line">        x=<span class="number">6</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot; z=&quot;</span>+z+<span class="string">&quot; x=&quot;</span>+x+<span class="string">&quot; super.x=&quot;</span>+<span class="built_in">super</span>.x +<span class="string">&quot; y=&quot;</span>+y+<span class="string">&quot;super.y=&quot;</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arg[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        A p1=<span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        AA p2=<span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">        p1.Printme();</span><br><span class="line">        p2.Printme();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="6.png"></p>
</li>
<li><p>总结 <code>this</code> 与 <code>super</code>的用法。</p>
<ol>
<li><code>this.</code> 调用本对象的属性或方法， <code>this()</code> 调用本对象的构造方法</li>
<li><code>super.</code> 调用父对象的属性和方法， <code>super()</code> 调用父对象的构造方法</li>
<li>两者都要放到第一句，所以不可同时使用。</li>
</ol>
</li>
<li><p>论述组合与继承的区别以及两者的使用场景（即什么时候宜用组合？什么时候宜用继承？）</p>
<ol>
<li>都是代码的复用</li>
<li>组合中，各类是独立的，继承中，子类缺乏独立性</li>
<li>从一般到特殊选择继承</li>
<li>作为工具类选择组合</li>
</ol>
</li>
<li><p><code>Java</code>中的运行时多态的含义是什么？通常在什么场景下应用，请举例说明。</p>
<ol>
<li>多态含义：同一个类有多个对象，接收到同一个消息时，会有不同的结果</li>
<li>运行时多态：使用父类引用，指向子类对象，再调用某一父类中的方法时，不同的子类会表现出不同的结果。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line">    <span class="type">double</span> dim1;</span><br><span class="line">    <span class="type">double</span> dim2;</span><br><span class="line">    Figure(<span class="type">double</span> d1, <span class="type">double</span> d2) &#123;</span><br><span class="line">        <span class="comment">// 有参的构造方法</span></span><br><span class="line">        <span class="built_in">this</span>.dim1 = d1;</span><br><span class="line">        <span class="built_in">this</span>.dim2 = d2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 用于计算对象的面积</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类中计算对象面积的方法，没有实际意义，需要在子类中重写。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line">    Rectangle(<span class="type">double</span> d1, <span class="type">double</span> d2) &#123;</span><br><span class="line">        <span class="built_in">super</span>(d1, d2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;长方形的面积：&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.dim1 * <span class="built_in">super</span>.dim2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line">    Triangle(<span class="type">double</span> d1, <span class="type">double</span> d2) &#123;</span><br><span class="line">        <span class="built_in">super</span>(d1, d2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;三角形的面积：&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.dim1 * <span class="built_in">super</span>.dim2 / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Figure figure; <span class="comment">// 声明Figure类的变量</span></span><br><span class="line">        figure = <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">9</span>, <span class="number">9</span>);</span><br><span class="line">        System.out.println(figure.area());</span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        figure = <span class="keyword">new</span> <span class="title class_">Triangle</span>(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">        System.out.println(figure.area());</span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        figure = <span class="keyword">new</span> <span class="title class_">Figure</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(figure.area());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//figure 的对象都是其子类。向上转型，实现多态。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用接口改写例6.8中的程序。</p>
</li>
<li><p>论述抽象类与接口的异同以及两者的使用场景。</p>
<p><img src="7.png"></p>
</li>
<li><p>论述内部类的定义和作用以及匿名内部类的使用。</p>
<ol>
<li>定义：在类的内部定义类</li>
<li>作用：可以访问外部类的成员，包括私有成员，使得该类具有其他类没有的特有功能。</li>
</ol>
</li>
</ol>
<h2 id="第-07-章-异常"><a href="#第-07-章-异常" class="headerlink" title="第 07 章  异常"></a>第 07 章  异常</h2><ol>
<li><p><code>Throwable</code>的子类包含哪两类？简述 <code>Error</code>类与 <code>Exception</code>类的区别。</p>
<ol>
<li>前者不可被捕获，后者可以被捕获</li>
<li>前者不需要被抛出，后者需要用 <code>Expetion</code> 抛出异常</li>
<li>前者会导致程序不能运行或中断，后者可以通过捕获抛出</li>
</ol>
</li>
<li><p><code>Exception</code>又分为 <code>checked</code>异常和 <code>unchecked</code>异常，请分别举例说明。</p>
<ol>
<li><p>前者是在编译是需要检查的异常，需要用 <code>try - catch</code> 捕获，后者是不需要在编译时处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// checked</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">       <span class="keyword">try</span>(Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in))&#123;</span><br><span class="line">           <span class="type">int</span> a=sc.nextShort();</span><br><span class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unchecked</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> []a;</span><br><span class="line">        System.out.println(a[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>请查阅资料，简述 <code>StackOverflowError</code>和 <code>OutOfMemoryError</code>两类错误的发生情形和原因。</p>
<ol>
<li>前者：递归次数太多、线程数量太多</li>
<li>后者：内存不够发生了内存溢出</li>
</ol>
</li>
<li><p>简述异常处理的两种方式，并举例说明区别。</p>
<ol>
<li><code>throw</code> 异常上抛，如果直接抛到了 <code>main</code> 就会结束程序</li>
<li><code>try - catch</code> 异常捕获处理，调用者不会知道哪里出错了，因为在下面已经被捕获并且处理了。</li>
</ol>
</li>
<li><p>选取 <code>RuntimeException</code> 类的五个子类，编写抛出并捕获上述子类异常的程序。（例如算术异常，空指针异常，类转换异常，数组越界异常等）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">int</span> a=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (java.lang.Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;算术异常：&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">int</span> []a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">            a[<span class="number">11</span>]=-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (java.lang.Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组越界异常：&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//new Scanner(System.in);</span></span><br><span class="line">            sc.nextInt();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (java.lang.Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空指针异常：&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (java.lang.Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空栈异常：&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">0</span>);</span><br><span class="line">            a=(String)a;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (java.lang.Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;类转换异常：&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据某业务场景自定义一个异常类，并在某场景下抛出该异常对象。</p>
<p>关于自定义异常类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelfException</span> <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Exception &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SelfException</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SelfException</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> SelfException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">1</span>)&#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SelfException</span>(<span class="string">&quot;a=1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>异常中的 <code>throws</code> 声明与 <code>throw</code>语句的区别是什么？请举例说明。 1.</p>
</li>
<li><p><code>finally</code>子句的作用是什么？</p>
</li>
</ol>
<h2 id="第-08-章-字符串"><a href="#第-08-章-字符串" class="headerlink" title="第 08 章  字符串"></a>第 08 章  字符串</h2><ol>
<li><p>借助 <code>JDK</code>文档, 选取 <code>String</code> 与 <code>StringBuffer</code> 、 <code>StringBuilder</code> 的常用 <code>API</code>，并编写实例测试 <code>API</code>的功能。</p>
</li>
<li><p>请简述 <code>String</code>， <code>StringBuffer</code>， <code>StringBuilder</code> 三者之间的共同点与区别，应该分别在何种场景下使用？</p>
<ol>
<li>相同点<ol>
<li>都是字符串类</li>
<li>内部基于字符数组实现，封装了对字符串的各种操作</li>
</ol>
</li>
<li>不同点<ol>
<li><code>String</code> 是不可变的，每次改变会重新创建对象。支持共享</li>
<li><code>StringBuffer</code> 是线程安全的，可变的</li>
<li><code>StringBuilder</code> 是多线程不安全的，可变的，相比 <code>StringBuffer</code> 更快。提供了和 <code>StringBuffer</code> 兼容的API，但不保证同步。</li>
</ol>
</li>
<li>使用场景<ol>
<li>多线程使用字符串缓冲区时，使用 <code>StringBuffer</code> 是更为安全的</li>
<li>效率上讲 <code>StringBuilder&gt;StringBuffer&gt;String</code></li>
</ol>
</li>
</ol>
</li>
<li><p>为什么不建议在for循环中使用“+”进行字符串拼接？</p>
<p><code>String</code> 是字符串常量，每次改变都会生成一个新的对象，会十分影响性能。</p>
</li>
</ol>
<h2 id="第-09-章-多线程"><a href="#第-09-章-多线程" class="headerlink" title="第 09 章   多线程"></a>第 09 章   多线程</h2><ol>
<li><p>创建线程的基本方法有哪些？</p>
<ol>
<li>通过继承 <code>Thread</code> 类</li>
<li>通过实现 <code>Runnable</code> 接口</li>
</ol>
</li>
<li><p><code>FutureTask</code> 类有什么作用？它实现了哪些接口？</p>
</li>
<li><p><code>volatile</code> 关键字有什么作用？</p>
<ol>
<li>保证程序的可见性和有序性（不能保证原子性）</li>
</ol>
</li>
<li><p><code>Java</code>提供了哪些同步机制来实现互斥？</p>
<ol>
<li><code>synchronized</code></li>
<li><code>ReentrantLock</code></li>
</ol>
</li>
<li><p>编写 <code>Java</code>程序模拟烧水泡茶最优工序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Acwing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WashKettle</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始洗水壶&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;水壶洗完了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeatWater</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始烧水&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;水烧完了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WashCup</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始洗茶杯&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;茶杯洗完了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetTea</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始拿茶叶&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;茶叶拿完了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Finish</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始泡茶&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;茶泡完了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tea</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">WashKettle</span>());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">HeatWater</span>());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">WashCup</span>());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">GetTea</span>());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Finish</span>());</span><br><span class="line">        t1.start();</span><br><span class="line">        t1.join();</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t3.start();</span><br><span class="line">        t3.join();</span><br><span class="line"></span><br><span class="line">        t4.start();</span><br><span class="line">        t4.join();</span><br><span class="line"></span><br><span class="line">        t2.join();</span><br><span class="line">        t5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">开始洗水壶</span></span><br><span class="line"><span class="comment">水壶洗完了</span></span><br><span class="line"><span class="comment">开始烧水</span></span><br><span class="line"><span class="comment">开始洗茶杯</span></span><br><span class="line"><span class="comment">茶杯洗完了</span></span><br><span class="line"><span class="comment">开始拿茶叶</span></span><br><span class="line"><span class="comment">茶叶拿完了</span></span><br><span class="line"><span class="comment">水烧完了</span></span><br><span class="line"><span class="comment">开始泡茶</span></span><br><span class="line"><span class="comment">茶泡完了</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>阅读公众号“码农翻身”的文章—《我是一个线程》。</p>
</li>
</ol>
<h2 id="第-10-章-JavaIO"><a href="#第-10-章-JavaIO" class="headerlink" title="第 10 章  JavaIO"></a>第 10 章  JavaIO</h2><ol>
<li><p><code>Java</code>中流的分类有哪些？</p>
<ol>
<li>输入流、输出流</li>
<li>字节流、字符流</li>
<li>节点流、过滤流</li>
</ol>
</li>
<li><p>字节流 <code>InputStream</code>和 <code>OutputStream</code>的子类分别有哪些？请编程举例说明其使用场景。与其对应的字符流分别有哪些？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="string">&quot;hello&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ByteArrayInputStream</span></span><br><span class="line">        <span class="comment">//字节数组和流之间的桥梁</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(b);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((n = bais.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//FileInputStream</span></span><br><span class="line">        <span class="comment">//文件和流之间的桥梁</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">rf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\\\Users\\\\JMhhh\\\\Desktop\\\\hello.txt&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">512</span>,c = <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] b2 =<span class="keyword">new</span> <span class="title class_">byte</span>[n2];</span><br><span class="line">            <span class="keyword">while</span>((c = rf.read(b2,<span class="number">0</span>,n2))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(b2,<span class="number">0</span>,c);</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">            rf.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//PipedInputStream</span></span><br><span class="line">        <span class="comment">//一个程序的输出连接到另一个的输入</span></span><br><span class="line">        <span class="type">PipedInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PipedInputStream</span>();</span><br><span class="line">        <span class="type">PipedOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PipedOutputStream</span>();</span><br><span class="line">        in.connect(out);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Input</span>(in)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Output</span>(out)).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ObjectInputStream</span></span><br><span class="line">        <span class="comment">//对象的序列化传输——恢复</span></span><br><span class="line">        <span class="type">people</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">people</span>(<span class="string">&quot;sda&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\\\Users\\\\JMhhh\\\\Desktop\\\\hello.txt&quot;</span>));</span><br><span class="line">        oout.writeObject(p1);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\\\Users\\\\JMhhh\\\\Desktop\\\\hello.txt&quot;</span>));</span><br><span class="line">        <span class="type">people</span> <span class="variable">O</span> <span class="operator">=</span> (people) oin.readObject();</span><br><span class="line">        System.out.println(O.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> old;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">people</span> <span class="params">(String name,<span class="type">int</span> old)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.old = old;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字节流与字符流的转化是怎样的？ <code>Java</code>对此提供了哪些支持？</p>
<ol>
<li>提供了<code>InputStreamReader</code>  类和 <code>OutputStreamWriter</code>类为字节流和字符流之间实现相互转换。</li>
<li>前者将字节流解码成字符，后者将字符转成字节写入流</li>
</ol>
</li>
<li><p><code>Java</code>中的过滤流（流的装配）有什么作用？请编程举例说明常用的过滤流。</p>
<ol>
<li><p>功能：</p>
<ol>
<li><p>可从字节流中写入，读取Java基本数据类型，不依赖机器的具体数据类型，方便存储和恢复数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\JMhhh\\Desktop\\hello.txt&quot;</span>)));</span><br><span class="line">        dos.writeInt(<span class="number">3</span>);</span><br><span class="line">        dos.writeUTF(<span class="string">&quot;sda&quot;</span>);</span><br><span class="line">        dos.writeDouble(<span class="number">3.14</span>);</span><br><span class="line">        dos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\JMhhh\\Desktop\\hello.txt&quot;</span>)));</span><br><span class="line">        System.out.println(dis.readInt());</span><br><span class="line">        System.out.println(dis.readUTF());</span><br><span class="line">        System.out.println(dis.readDouble());</span><br><span class="line">        dis.close();</span><br></pre></td></tr></table></figure>
</li>
<li><p>用于缓存字符流，可以一行一行的读</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">bin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="type">String</span>  <span class="variable">s</span> <span class="operator">=</span> bin.readLine();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p>什么是对象的序列化和反序列化？ <code>Java</code> 对此提供了哪些支持？对象序列化用于什么情形？请编程相关示例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="type">people</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">people</span>(<span class="string">&quot;sda&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\JMhhh\\Desktop\\hello.txt&quot;</span>));</span><br><span class="line">        oout.writeObject(p1);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\JMhhh\\Desktop\\hello.txt&quot;</span>));</span><br><span class="line">        <span class="type">people</span> <span class="variable">O</span> <span class="operator">=</span> (people) oin.readObject();</span><br><span class="line">        System.out.println(O.name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> old;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">people</span> <span class="params">(String name,<span class="type">int</span> old)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.old = old;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Java</code>的 <code>File</code>类表示什么？有什么作用？</p>
<ol>
<li>访问文件和目录，文件属性等</li>
</ol>
<p><img src="8.png"></p>
</li>
<li><p><code>Java</code>对文件的读写分别提供了哪些支持？</p>
<ol>
<li>文件输入输出流的类</li>
</ol>
</li>
</ol>
<h2 id="第-11-章-网络编程"><a href="#第-11-章-网络编程" class="headerlink" title="第 11 章  网络编程"></a>第 11 章  网络编程</h2><ol>
<li>基于 <code>TCP Socket</code> 的 <code>C/S</code>通信与基于 <code>UDP</code>数据报的 <code>C/S</code> 通信有哪些区别？ <code>Java</code>分别提供了哪些支持</li>
<li>编写一个基于 <code>TCP Socket</code>套接字的 <code>C/S</code>聊天器程序。</li>
<li>编写一个基于 <code>UDP</code>数据报的 <code>C/S</code>聊天器程序。</li>
</ol>
<h1 id="泪和对象"><a href="#泪和对象" class="headerlink" title="泪和对象"></a>泪和对象</h1><ol>
<li>对象和对象的引用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">dog</span>();<span class="comment">//创建对象，规划堆（heap）内存，没有引用则为孤儿，自动回收</span></span><br><span class="line">dog dp;<span class="comment">// 声明一个引用（不会生成对象，不会关联对象），存栈里</span></span><br><span class="line">dp=<span class="keyword">new</span> <span class="title class_">dog</span>()<span class="comment">//dg指向实际对象</span></span><br></pre></td></tr></table></figure>

<ol>
<li>参数传递</li>
</ol>
<ul>
<li>简单类型作为变量参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pubilc <span class="keyword">class</span> <span class="title class_">ValuePass</span>&#123;</span><br><span class="line">	prinvate <span class="keyword">static</span> <span class="type">int</span> a;<span class="comment">//静态数据-属于类</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(Strring [] args)</span>&#123;</span><br><span class="line">		modify(a);<span class="comment">//方法引用，实参传入</span></span><br><span class="line">		System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modify</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">		a++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出0 </span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象引用变量作为参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InsClass</span>&#123;</span><br><span class="line">	<span class="type">int</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunIntClass</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modefyValue</span><span class="params">(IntClass s,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">		s.value=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args&#123;</span></span><br><span class="line"><span class="params">		IntClass s=new IntClass()</span>;<span class="comment">// 分配堆空间</span></span><br><span class="line">		modifyValue(a,<span class="number">8</span>);<span class="comment">//分配栈空间</span></span><br><span class="line">		System.out.println(a.value);	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>数组对象</li>
</ol>
<ul>
<li>声明格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> [] arr;</span><br><span class="line">Stiring [] ex;</span><br><span class="line"><span class="comment">//int []10] arr 是错误滴！</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数组初始化对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];<span class="comment">//在堆上为数组对象分配整型空间，默认为0；</span></span><br></pre></td></tr></table></figure>

<ul>
<li>二维数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[][]<span class="comment">//数组声明</span></span><br><span class="line">arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>]<span class="comment">//数组初始化</span></span><br></pre></td></tr></table></figure>

<ol>
<li>Static 和 final 修饰符</li>
</ol>
<ul>
<li><p>static数据成员初始化：静态数据成员仅在类加载时进行初始化，且只执行一次初始化、首次访问某类的静态字段或静态方法是，会加载该类，并执行静态初始化语句</p>
</li>
<li><p>静态方法：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IntClass</span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countNum</span><span class="params">()</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line"> System.out.println(IntClass.countNum());<span class="comment">//首次访问加载该类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>final</code>修饰属性，则属性为常量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> NUM=<span class="number">20</span>;</span><br><span class="line">NUM=<span class="number">30</span>;<span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>final</code>修饰方法，则该方法在子类当中不能被覆盖</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="title function_">voidmethod1</span><span class="params">()</span>&#123;&#125;<span class="comment">//这个方法不能被子类继承</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;...&#125;<span class="comment">//编译错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>final</code>修饰类，则该类不能被继承</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Person</span> entends Parent&#123;</span><br><span class="line">&#125;<span class="comment">//可以继承Parent类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">&#125;<span class="comment">//编译报错，不能继承Person类</span></span><br></pre></td></tr></table></figure>

<ol>
<li>包（ <code>package</code> ）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被访问</span></span><br><span class="line"><span class="keyword">package</span> com.resource;</span><br><span class="line"><span class="comment">//类访问权限与属性、方法访问权限需修改为public</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line"><span class="keyword">import</span> com.resource.FinghterPlane</span><br></pre></td></tr></table></figure>

<h1 id="第五章-封装、继承与多态"><a href="#第五章-封装、继承与多态" class="headerlink" title="第五章 封装、继承与多态"></a>第五章 封装、继承与多态</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String_name)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(_name!=<span class="literal">null</span>)&#123;<span class="comment">//提高安全性</span></span><br><span class="line">			name=_name.trim();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="一、封装"><a href="#一、封装" class="headerlink" title="一、封装"></a>一、封装</h2><ol>
<li>访问权限控制符<ol>
<li><code>publc</code>(公共访问权限）</li>
<li><code>protected</code>(包访问权继承访问权限）</li>
<li>无访问控制符修饰（默认为包访问权限）</li>
<li><code>private</code>(类内部访问权限）</li>
</ol>
</li>
</ol>
<h2 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h2><ol>
<li>通过 <code>extends</code> 关键字实现</li>
<li>子类继承了父类的所有属性和方法，但只有 <code>public</code>、 <code>protected</code>的属性和方法在子类是可见的。</li>
</ol>
<h2 id="三、多态"><a href="#三、多态" class="headerlink" title="三、多态"></a>三、多态</h2><ol>
<li><p>多态的概念：多态是指一个程序中同名的不同方法共存情况</p>
</li>
<li><p>Java中提供两种多态机制 重载 <code>overloading</code>与 覆写 <code>overriding</code></p>
<p>​	a.重载：方法名称相同，参数类型或个数不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">stuMange</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">(Integer i)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">(<span class="type">int</span> ... i)</span>&#123;<span class="comment">//可能有多个参数</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">p.getScore(<span class="number">5</span>) <span class="comment">//调用优先级：1&gt;2&gt;3</span></span><br></pre></td></tr></table></figure>

<p>​	b.覆写：子类堆父类的同名方法重新进行定义。</p>
<p>​		(i)子类的访问修饰符权限应大于等于父类。</p>
<p>​		(ii)应该能够向上转型为父类的返回类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">	Number <span class="title function_">getScore</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Integer(<span class="number">7</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">	<span class="meta">@override</span><span class="comment">//帮忙检查是否覆写</span></span><br><span class="line">	Number <span class="title function_">getScore</span><span class="params">(<span class="type">int</span> b)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">INteger</span>(<span class="number">8</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="第六章-继承与多态"><a href="#第六章-继承与多态" class="headerlink" title="第六章 继承与多态"></a>第六章 继承与多态</h1><h2 id="一、-this-与-super"><a href="#一、-this-与-super" class="headerlink" title="一、 this 与 super"></a>一、 <code>this</code> 与 <code>super</code></h2><ol>
<li><p><code>this</code></p>
<ol>
<li>主要应用场合：<ol>
<li>表示当前对象引用，常用与形参或局部变量与类成员变量同名的情形，使用 <code>this.</code> 成员名表示当前对象的成员。</li>
<li>调用当前类的构造方法</li>
</ol>
</li>
</ol>
</li>
<li><p><code>super</code> 访问当前类的直接父亲，主要应用场合：</p>
<ol>
<li><p>子类的数据成员或成员方法与父类的数据成员或成员方法名字相同时，当要调用父亲的痛，同名方法或同名数据成员时则可用 <code>super.</code>数据成员、成员方法。</p>
</li>
<li><p><code>super</code> （参数列表），表示现实调用父类构造方法，对子类对象中从父类继承过来的数据成员进行初始化。</p>
</li>
<li><p>显式使用 <code>super</code> 调用父类的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AC</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,z=<span class="number">0</span>;</span><br><span class="line">	AC (<span class="type">int</span> x)&#123;</span><br><span class="line">		<span class="built_in">this</span>.x=x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SonAC</span> <span class="keyword">extends</span> <span class="title class_">AC</span>&#123;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">	SonAC (<span class="type">int</span> x)&#123;</span><br><span class="line">		<span class="built_in">super</span>(x);<span class="comment">//调用父类构造方法</span></span><br><span class="line">		a=x+<span class="number">7</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>隐式使用 <code>super</code> 调用父类的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pare</span>&#123;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">3</span>;</span><br><span class="line">	Pare()&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;call super()&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Construct</span> <span class="keyword">extends</span> <span class="title class_">Pare</span>&#123;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line">	Construct()&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;execute Construct()&quot;</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">	Construct(<span class="type">int</span> num)&#123;</span><br><span class="line">		<span class="built_in">this</span>();</span><br><span class="line">		System.out.println(<span class="string">&quot;excute Construct(int));</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	public static void main(String[] args)&#123;</span></span><br><span class="line"><span class="string">		Construct ct=new Construct(9);</span></span><br><span class="line"><span class="string">		System.out.println(ct.i);</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//输出结果</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">call super()</span></span><br><span class="line"><span class="string">ececute Construct()</span></span><br><span class="line"><span class="string">execute COnstruct()</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">*/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="二、抽象类"><a href="#二、抽象类" class="headerlink" title="二、抽象类"></a>二、抽象类</h2><ol>
<li><p>抽象类：用 <code>abstract</code> 修饰的类称为抽象类，用 <code>abstract</code> 修饰的成员方法称为抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> m;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">c</span><span class="params">()</span>&#123;<span class="comment">//非抽象方法可以调用抽象方法</span></span><br><span class="line">		a();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>&#123;&#125;<span class="comment">//仅实现抽象方法b()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;&#125;<span class="comment">//实现抽象方法a()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象类的应用：抽象类和具体类的关系就是一般类和特殊类之间的关系，在继承体系中对外提供抽象的子类公共的行为接口。</p>
</li>
</ol>
<h2 id="三、接口-interface"><a href="#三、接口-interface" class="headerlink" title="三、接口 interface"></a>三、接口 <code>interface</code></h2><ol>
<li><p>接口声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceA</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ON</span> <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceB</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceC</span> <span class="keyword">extends</span> <span class="title class_">InterfaceA</span>, InterfaceB &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">c</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceImp</span> <span class="keyword">implements</span> <span class="title class_">InterfaceC</span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;  <span class="comment">//必须public，权限不能缩小</span></span><br><span class="line">	System.out.println(<span class="string">&quot;call a()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call b()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">c</span><span class="params">()</span> &#123;</span><br><span class="line">  	System.out.println(<span class="string">&quot;call c()&quot;</span>);</span><br><span class="line">   &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项</p>
<ul>
<li>接口定义用关键字 <code>interface</code>，而不是用<code>class</code>，<code>interface</code>前的修饰符要么为<code>public</code>，要么为缺省。</li>
<li>在类中，用<code>implements</code>关键字来实现接口。一个类可以实现多个接口，在<code>implements</code>后用逗号隔开多个接口的名字。一个接口也可被多个类来实现。</li>
<li>接口具有继承性，可通过<code>extends</code>关键字声明接口的父接口列表。</li>
<li>接口定义的数据成员全是<code>public final static</code>(静态常量)，即使没有修饰符。存储在该接口的静态存储区域内，使用接口名.字段或实现类.字段均可访问。</li>
<li>接口中没有构造方法；所有的抽象方法都是<code>public abstract</code> 方法（与抽象类有所不同）。即使没有修饰符，其效果完全等效。注：方法前不能修饰为<code>final</code>。</li>
<li>如果实现某接口的类不是<code>abstract</code>修饰的抽象类，则在类的定义部分必须实现接口的所有抽象方法，而且方法头部分应该与接口中的定义完全一致。</li>
<li>如果实现接口的类是<code>abstract</code>类，则它可以不实现该接口的所有方法。但对于抽象类的任何一个非抽象的子类而言，接口中的所有抽象方法都必须实现。</li>
<li>类在实现接口的抽象方法时，必须显式使用public修饰符，否则将被警告为缩小了接口中定义的方法的访问控制范围。</li>
</ul>
</li>
<li><p>实现过程</p>
<ol>
<li><p>定义接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span>  <span class="title class_">Washer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ON</span> <span class="operator">=</span> <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OFF</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">startUp</span><span class="params">()</span>;     <span class="comment">//启动  </span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">letWaterIn</span><span class="params">()</span>;  <span class="comment">//进水</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">washClothes</span><span class="params">()</span>; <span class="comment">//洗衣</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">letWaterOut</span><span class="params">()</span>; <span class="comment">//排水</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;        <span class="comment">//停止</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RoseBrand</span> <span class="keyword">implements</span> <span class="title class_">Washer</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">startUp</span><span class="params">()</span>&#123; System.out.println(<span class="string">&quot;startUp&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">letWaterIn</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;letWaterIn&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">washClothes</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;washClothes&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">letWaterOut</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;letWaterOut&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;stop&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">dehydrate</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;dehydrate &quot;</span>);&#125;<span class="comment">//脱水</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="comment">//接口声明引用实现接口的RoseBrand类的对象。</span></span><br><span class="line">      <span class="type">Washer</span>  <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoseBrand</span>();</span><br><span class="line">      w.startUp();</span><br><span class="line">      w.letWaterIn();</span><br><span class="line">      w.washClothes();</span><br><span class="line">      w.letWaterOut();</span><br><span class="line">      w.stop();</span><br><span class="line">      <span class="comment">//w.dehydrate ();当通过接口调用玫瑰洗衣机类独有的，  </span></span><br><span class="line">                     <span class="comment">//接口未定义的功能方法，编译会报错。</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h3><p>相同点：二者都可具有抽象方法，都不能实例化，但都可以有自己的声明，并能引用子类或实现类对象。</p>
<p>不同点：</p>
<table>
<thead>
<tr>
<th><strong>特性</strong></th>
<th><strong>抽象类</strong></th>
<th><strong>接口</strong></th>
</tr>
</thead>
<tbody><tr>
<td>组合</td>
<td>子类只能继承单一抽象类</td>
<td>实现类可以继承多个接口</td>
</tr>
<tr>
<td>属性</td>
<td>可以包含一般属性，非抽象方法可以引用这些属性</td>
<td>只有静态属性，不支持对象状态</td>
</tr>
<tr>
<td>方法</td>
<td>在子类中实现抽象方法</td>
<td>在实现类中实现抽象方法</td>
</tr>
<tr>
<td>构造器</td>
<td>可以有构造器</td>
<td>没有构造器</td>
</tr>
<tr>
<td>设计</td>
<td>is-a关系</td>
<td>can-do关系</td>
</tr>
</tbody></table>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ol>
<li><p>定义：内部类就是在某个类的内部又定义了一个类。</p>
</li>
<li><p>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line"> <span class="keyword">private</span> String index=<span class="string">&quot;The String is in Outer Class&quot;</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">   String index=<span class="string">&quot;The String is in Inner Class&quot;</span>;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">     String index=<span class="string">&quot;The String is in print Method&quot;</span>;</span><br><span class="line">     System.out.println(index);</span><br><span class="line">     System.out.println(<span class="built_in">this</span>.index);</span><br><span class="line">     System.out.println(Outer.<span class="built_in">this</span>.index);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;<span class="comment">//内部类Inner定义</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">  inner.print();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> Inner <span class="title function_">getInner</span><span class="params">()</span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line"> &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOuterAndInner</span>&#123;</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();   <span class="comment">//先产生外部类对象    </span></span><br><span class="line">  <span class="comment">//利用外部类对象引用.new语句创建内部类对象实例</span></span><br><span class="line">  Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();  </span><br><span class="line">  <span class="comment">//利用外部类提供的getter方法创建内部类对象实例</span></span><br><span class="line">  <span class="comment">//Outer.Inner inner = outer.getInner();    </span></span><br><span class="line">  inner.print();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="第七章-异常"><a href="#第七章-异常" class="headerlink" title="第七章 异常"></a>第七章 异常</h1><ol>
<li><p>异常分类</p>
<ol>
<li><code>Error</code>:致命异常。需人工介入（虚拟机产生的错误：<code>StackOverflowError</code>、<code>OutOfMemoryError</code>）</li>
<li><code>Exception</code>:非致命异常。</li>
</ol>
</li>
<li><p>异常处理</p>
<ol>
<li>声明抛出处理：向调用方传播异常<ol>
<li>显式声明抛出：<code>throws</code>语句</li>
<li>隐式声明抛出：<code>throws</code>语句可省略</li>
</ol>
</li>
<li>程序捕获处理：在当前方法捕获处理异常<ol>
<li>非嵌套：<code>try/catch/finally</code>语句</li>
<li>嵌套：同上</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="第八章-字符串——string"><a href="#第八章-字符串——string" class="headerlink" title="第八章 字符串——string"></a>第八章 字符串——<code>string</code></h1><ul>
<li><p><code>string</code> 对象的构造与初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(“abc<span class="string">&quot;);</span></span><br><span class="line"><span class="string">String s4 = new String(“abc&quot;</span>);</span><br><span class="line"><span class="comment">//“==”用于比较两个对象的引用是否相同</span></span><br><span class="line">System.out.println(s1==s2); <span class="comment">// false</span></span><br><span class="line">System.out.println(s1==s3); <span class="comment">// true</span></span><br><span class="line">System.out.println(s2==s4); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String对equals方法进行了覆写，可用于比较两个字符串的内容是否相同。</span></span><br><span class="line">System.out.println(s1.equals(s3)); <span class="comment">// true</span></span><br><span class="line">System.out.println(s2.equals(s4)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>String</code> 对象的特点</p>
<ul>
<li><p>String对象是不可变的，在String类中每一个看起来会修改String对象内容的方法，实质都是创建了一个全新的String对象。</p>
<p><img src="1.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span>   <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line"><span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span>[] value; <span class="comment">//常量字符数组对象引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">concat</span><span class="params">(String str)</span> &#123;<span class="comment">//字符串连接</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">otherLen</span> <span class="operator">=</span> str.length();</span><br><span class="line">    <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;<span class="comment">//返回当前对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> value.length;</span><br><span class="line">    <span class="type">char</span>[] buf = Arrays.copyOf(value, len + otherLen);<span class="comment">//拷贝之前的</span></span><br><span class="line">    str.getChars(buf, len);<span class="comment">//连接现在的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="literal">true</span>); <span class="comment">//创建新的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>StringBuffer</code> : <code>StringBuffer</code> 对象的值是可变的，对字符串的增加、插入、修改、删除等操作比String高效（不需多次创建新的对象）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StringBuffer源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StringBuffer</span> <span class="keyword">extends</span> <span class="title class_">AbstractStringBuilder</span></span><br><span class="line">           <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, CharSequence &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AbstractStringBuilder源码</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title class_">Appendable</span>, CharSequence &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value is used for character storage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">char</span>[] value; <span class="comment">//普通字符数组对象引用，被StringBuffer继承</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//AbstractStringBuilder源码</span></span><br><span class="line"><span class="keyword">public</span> AbstractStringBuilder <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> appendNull();</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> str.length();</span><br><span class="line">    ensureCapacityInternal(count + len); <span class="comment">//有可能扩容，产生新数组</span></span><br><span class="line">    str.getChars(<span class="number">0</span>, len, value, count);</span><br><span class="line">    count += len;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StringBuffer 源码</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    toStringCache = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">super</span>.append(str); <span class="comment">//调用父类的append方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>; <span class="comment">//返回当前对象引用 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>StringBUilder</code> : JDK5 引入了 <code>StringBuilder</code>，其与 <code>StringBuffer</code>的 API兼容，性能比 <code>StringBuffer</code>更高，但不是线程安全的。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//String字符串拼接：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>;i++)&#123; </span><br><span class="line">   s = s + “b” ;  <span class="comment">//编译器会进行优化，但此种写法仍然效率低下，循环体内每次</span></span><br><span class="line">                    需要产生StringBuilder对象</span><br><span class="line"></span><br><span class="line"><span class="comment">//StringBuilder字符串拼接：</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">//效率较高，只需新建一个对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>;i++)&#123; </span><br><span class="line">    st.append(“b<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//字符串拼接，应使用StringBuilder或StringBuffer，并将对象创建语句放到循环体外</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>String</code> 类的常用方法及源码学习</p>
</li>
<li><p><code>string</code> 类的设计优点及使用场景</p>
</li>
</ul>
<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>创建线程—— <code>Thread</code>类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Thread extends Object implements Runnable</span><br></pre></td></tr></table></figure>

<p>方法一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adder</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123; </span><br><span class="line">   <span class="type">int</span>[] datas=<span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> total=<span class="number">0</span>;</span><br><span class="line">   Adder(<span class="type">int</span>[] _datas)&#123;</span><br><span class="line">     datas = _datas;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;datas.length;i++)&#123;</span><br><span class="line">         sum += datas[i];</span><br><span class="line">     &#125;</span><br><span class="line">     total = sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJoin</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">   <span class="type">Random</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">   <span class="type">int</span>[] datas = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10000</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    datas[i] = rd.nextInt(Integer.MAX_VALUE);</span><br><span class="line">   &#125;<span class="comment">//生成1万个随机数</span></span><br><span class="line">   <span class="type">Adder</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adder</span>(datas);</span><br><span class="line">   a.start();</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">      a.join();<span class="comment">//等待a所引用的线程执行完毕</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span>(InterruptedException it)&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println(a.total);<span class="comment">//获得a线程结果</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<p>方法三：异步</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureTasks</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">   <span class="type">Random</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">   <span class="type">int</span>[] datas = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10000</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">     datas[i] = rd.nextInt(Integer.MAX_VALUE);</span><br><span class="line">   &#125;<span class="comment">//生成1万个随机数</span></span><br><span class="line"></span><br><span class="line">   <span class="type">Adder</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adder</span>(datas);</span><br><span class="line">   FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;Integer&gt;(a); <span class="comment">//异步任务</span></span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">Thread</span>(ft).start(); </span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//此处可以做其他事情</span></span><br><span class="line">       System.out.println(ft.get().intValue()); <span class="comment">//获取异步结果</span></span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e）&#123;&#125;</span><br><span class="line">     <span class="keyword">catch</span> (ExecutionException e) &#123;&#125;          </span><br><span class="line">   &#125;</span><br><span class="line">&#125;  </span><br><span class="line">    <span class="type">int</span>[] datas=<span class="literal">null</span>;</span><br><span class="line">    Adder(<span class="type">int</span>[] _datas)&#123;</span><br><span class="line">       datas = _datas;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;datas.length;i++)&#123;</span><br><span class="line">         sum+=datas[i];</span><br><span class="line">         System.out.println(sum);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> Integer.valueOf(sum); &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><ol>
<li>数据单线程内可见</li>
<li>只读对象</li>
<li>线程安全类</li>
</ol>
<p>如果多个线程想要对某个对象进行并发更新操作，但又不属于上述三类，此时需要考虑线程安全问题，在代码中实现安全同步机制。</p>
<ul>
<li><p>线程安全-访问共享资源问题</p>
</li>
<li><p>线程安全问题-访问共享资源-可见性</p>
</li>
<li><p>线程安全问题-访问共享资源-原子性</p>
</li>
<li><p>解决线程安全问题：线程同步机制（互斥）</p>
<ul>
<li>对象监视器<ul>
<li>同步块又称临界区，保证同一时间只有一个线程执行同步块内的代码</li>
<li>锁的范围尽可能小：能锁对象，就不要锁类；能锁代码块就不要锁方法。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Resource</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; </span><br><span class="line"> <span class="keyword">volatile</span> <span class="keyword">public</span> <span class="type">int</span> i;</span><br><span class="line"> <span class="keyword">volatile</span> <span class="keyword">public</span> Integer it;</span><br><span class="line">  <span class="keyword">public</span>  <span class="title function_">Resource</span><span class="params">(<span class="type">int</span> _i)</span>&#123;</span><br><span class="line">    i = _i; </span><br><span class="line">   it = <span class="keyword">new</span> <span class="title class_">Integer</span>(i);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;   </span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;   </span><br><span class="line"> <span class="keyword">synchronized</span>(it)&#123;    </span><br><span class="line"> <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;     </span><br><span class="line">   <span class="keyword">try</span>&#123;        </span><br><span class="line">   Thread.sleep(<span class="number">200</span>);        </span><br><span class="line">&#125;        </span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123;&#125;        </span><br><span class="line">i--;        </span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot;  &quot;</span>+i);    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">else</span>&#123;        </span><br><span class="line">System.out.println(Thread.currentThread().getName());        </span><br><span class="line"><span class="keyword">break</span>; &#125;&#125;</span><br><span class="line">&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSecurity</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">  <span class="type">Resource</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resource</span>(<span class="number">9</span>);</span><br><span class="line">  <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(m);</span><br><span class="line">  <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(m);</span><br><span class="line">  t1.start();</span><br><span class="line">  t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Java并发包中的锁类</p>
<ul>
<li><p>死锁问题（dead lock）</p>
<p>如果多个线程都处于等待状态，彼此需要对方所占用的监视器所有权，就构成死锁，Java即不能发现也不能避免死锁。</p>
<p><img src="2.jpg"></p>
<p><img src="3.jpg"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="线程同步通信（协作）"><a href="#线程同步通信（协作）" class="headerlink" title="线程同步通信（协作）"></a>线程同步通信（协作）</h3><h1 id="第十章-I-x2F-O输入输出"><a href="#第十章-I-x2F-O输入输出" class="headerlink" title="第十章 I&#x2F;O输入输出"></a>第十章 I&#x2F;O输入输出</h1><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><h2 id="字节流与字符流"><a href="#字节流与字符流" class="headerlink" title="字节流与字符流"></a>字节流与字符流</h2><p><img src="4.jpg" alt="PNG image.png"></p>
<h2 id="流的装配与序列化"><a href="#流的装配与序列化" class="headerlink" title="流的装配与序列化"></a>流的装配与序列化</h2><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2>]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>course</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA个人银行账户管理系统课程设计报告</title>
    <url>/Jmins0.github.io/2022/10/14/Java%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="一、课程设计要求与目的"><a href="#一、课程设计要求与目的" class="headerlink" title="一、课程设计要求与目的"></a>一、课程设计要求与目的</h1><ol>
<li>模仿个人银行账户管理系统的C++版本（第4章-第9章），使用Java语言重新实现该系统，比较C++与Java在实现上的异同，熟练掌握Java基础及语法。</li>
<li>根据业务需求的增加，对个人银行账户管理系统进行功能上的完善，利用面向对象的思想对代码进行重构，体会抽象、封装、继承、多态等特性在实际系统中的应用，掌握构造可复用、可扩展、可维护软件的基本技能。</li>
</ol>
<span id="more"></span>

<h1 id="二、课程设计版本记录"><a href="#二、课程设计版本记录" class="headerlink" title="二、课程设计版本记录"></a>二、课程设计版本记录</h1><h2 id="1-、个人银行账户管理系统版本0-1（对应第4章记录）"><a href="#1-、个人银行账户管理系统版本0-1（对应第4章记录）" class="headerlink" title="1 、个人银行账户管理系统版本0.1（对应第4章记录）"></a>1 、个人银行账户管理系统版本0.1（对应第4章记录）</h2><p>1.1  系统需求</p>
<p>能够建立账户，其中账户包括账号、余额、年利率，上次变更日期，余额按日累加之和。需要实现功能：记录一笔账、获得到指定日期为止的存款金额按日累加值<code>accumulate</code>、获取ID、获取余额、获取利率、存入现金、取出现金，每年进行一次结算利息，显示账户信息。</p>
<p>1.2  系统设计</p>
<p>设计类 <code>SavingsAccount</code> 包括成员账号<code>id</code>、余额<code>balance</code>、年利率<code>rate</code>，上次变更日期<code>lastDate</code>，余额按日累加之和<code>accumulation</code>。包括方法记录一笔账<code>record</code>、获得到指定日期为止的存款金额按日累加值<code>accumulate（）</code>、获得ID <code>getID（）</code>、获得余额<code>getBalance（）</code>、获得年利率<code> getRate（）</code>、存入现金<code> deposit（）</code>、取出现金 <code>withdraw（）</code>、结算利息 <code>settle（）</code>、显示账户信息<code> show（）</code>。当余额变动时，需要做的是将变动前的余额与该余额所持续的天数相乘，累加到 <code>accumulation</code>中，再修改 <code>lastDate</code>。用来结算利息，因为余额变化，会导致利息不一样，所以，每次余额变动都要累计计算。</p>
<p>1.3  系统实现</p>
<p>对重要的类及内部的数据结构进行介绍（可以适当的贴一些代码，比如类的定义） 、</p>
<p>类定义如图：</p>
<p> <img src="clip_image002.jpg" alt="img"></p>
<p>1.4  系统测试</p>
<p>能够创建账户，进行存款，取款，计算余额，符合设计预期。</p>
<p><img src="clip_image004.jpg" alt="img"></p>
<p>1.5  体会心得</p>
<ul>
<li><p>利息结算和累计函数设计十分巧妙，可以很方便的结算利息。</p>
</li>
<li><p>实现同一项目，Java比C++更严谨，全想对象语言实现起来也更方便。</p>
</li>
<li><p>实例化对象时Java相比于C++需要使用关键字<code>new</code>。</p>
</li>
<li><p>第一个部分的修改，也弥补了很多C++没有学到的面向对象的基础知识。</p>
</li>
</ul>
<h2 id="2-个人银行账户管理系统版本0-2（对应第5章记录）"><a href="#2-个人银行账户管理系统版本0-2（对应第5章记录）" class="headerlink" title="2  个人银行账户管理系统版本0.2（对应第5章记录）"></a>2  个人银行账户管理系统版本0.2（对应第5章记录）</h2><p>2.1 系统需求</p>
<p>新增了静态属性与方法，用来计算当前所有账户总金额。</p>
<p>2.2 系统设计</p>
<p>在 <code>SavingAccount</code> 中添加静态成员变量 <code>total</code> ，同时添加相应成员函数 <code>getToatal（）</code>，并将不需要修改的，设置成常成员函数。</p>
<p>2.3 系统实现</p>
<p><img src="clip_image006.jpg" alt="img"></p>
<p><img src="clip_image008.jpg" alt="img"></p>
<p><img src="clip_image010.jpg" alt="img"></p>
<p>2.4 系统测试 </p>
<p>增加了<code> total</code> 所有账户总额的显示结果，符合预期。</p>
<p> <img src="clip_image012.jpg" alt="img"></p>
<p>2.5 体会心得</p>
<ul>
<li><p>静态数据成员仅由静态成员方法访问。</p>
</li>
<li><p><code>Java</code>没有<code>const</code>关键字，<code>C++</code>中的<code>const</code>类似于<code>Java</code>的<code>final</code>。同时书写的位置有所不同。</p>
</li>
<li><p><code>C++</code>调用类的静态成员函数是<code>&lt;类名&gt;::&lt;函数名&gt;</code>，而<code>Java</code>是<code>&lt;类名&gt;.&lt;函数名&gt;</code>。</p>
</li>
</ul>
<h2 id="3-、个人银行管理系统版本0-3（对应第6章记录）"><a href="#3-、个人银行管理系统版本0-3（对应第6章记录）" class="headerlink" title="3 、个人银行管理系统版本0.3（对应第6章记录）"></a>3 、个人银行管理系统版本0.3（对应第6章记录）</h2><p>3.1     系统需求</p>
<p>新增了字符串和对象数组，用字符串存储ID，余额不足不能取钱，并显示错误，能够更直观的显示日期。</p>
<p>3.2     系统设计</p>
<p>设计日期类<code> Date</code> ，其中包括数据成员 <code>DAYS_BEFORE_MONTH[]</code>数组，用来存储某月1日前有多少天，<code> year</code>、<code>month</code>、<code>day</code>、<code>totalDays</code>该日期是公元元年1月1日开始的第几天，设计函数 <code>distance（）</code>计算两个日期相差多少天，函数 <code>show（）</code>显示年月日。 </p>
<p>3.3     系统实现</p>
<p>描述账号的数据类型由<code>int</code>改为<code>string</code>。描述日期的数据类型由<code>int</code>改为<code>Date</code>类，并为<code>deposit</code>,<code>withdraw</code>和<code>settle</code>并增加了一个用来存储该笔账目信息的<code>string</code>型的<code>desc</code>参数。增加一个专用于输出错误信息的<code>error</code>方法。</p>
<p><img src="clip_image014.jpg" alt="img"></p>
<p>3.4     系统测试</p>
<p>能够更直观的看到日期，同时能够使用字符串存储账号和说明文字，符合设计预期。</p>
<p><img src="clip_image016.jpg" alt="img"></p>
<p>3.5     体会心得</p>
<ul>
<li><p><code>Java</code>数组必须先初始化才可以使用，初始化的时候会分配内存；动态初始化和静态初始化不能同时存在。</p>
</li>
<li><p><code>Date</code>类的设置，使得用户能够更直观的输入或者读出日期时间，同时，程序员也能很方便的设计日期相关的操作，十分便捷。</p>
</li>
<li><p>增添的备注功能，记录哪笔账去哪里，也更加符合现实生活的需求。</p>
</li>
</ul>
<h2 id="4、个人银行管理系统版本0-4"><a href="#4、个人银行管理系统版本0-4" class="headerlink" title="4、个人银行管理系统版本0.4"></a>4、个人银行管理系统版本0.4</h2><p>4.1     系统需求</p>
<ul>
<li><p>增加了信用账户的需求：</p>
</li>
<li><p>信用账户允许透支，每个信用账户都有一定的信用额度，总的透支金额应在这个额度之内。</p>
</li>
<li><p>如果信用账户内存钱，不会有利息，但使用信用账户透支则需要支付利息，从透支那一天其就开始计算利息。</p>
</li>
<li><p>信用账户每月进行以及结算，假定结算日为每月的1日。每年需要交一次年费，假定每年1月1日结算的时候扣缴年费。</p>
</li>
</ul>
<p>4.2     系统设计</p>
<ul>
<li><p>设计一个基类<code>Account</code>用来描述所有账户的共性，派生出<code>SavingsAccount</code>类储蓄账户，和<code>CreditAccount</code>类信用账户。</p>
</li>
<li><p>在基类<code>Account</code>中，保留数据成员:<code>id</code>账号，<code>balance</code>余额，<code>total</code>静态数据成员账户总金额，成员方法:<code>show（）</code>输出信息。原来的<code>record（）</code>,<code>error（）</code>方法的访问控制权限修改为<code>protected</code>，供派生类调用，同时还有一个保护的构造方法。</p>
</li>
<li><p>在派生类中实现，处理存款的成员方法 <code>deposit（）</code>、处理取款的成员方法 <code>withdraw（）</code>、处理结算的成员方法 <code>settle（）</code>。储蓄账户用来表示年利率的<code>rate（）</code>、信用账户用来表示信用额度的<code>credit（）</code>、表示日利率 <code>rate（）</code>、表示年费<code>fee（）</code>以及其获取他们的成员方法。</p>
</li>
<li><p>创建一个新类<code>Accumulator</code>用来实现各个账户的按日累加和的功能，设计 <code>Accumulator</code>类类型的累加器 <code>acc</code> 在两个派生类中分别实现各自功能。</p>
</li>
</ul>
<p>4.3     系统实现</p>
<p><code>Accumulator </code>将某数值按日累加</p>
<p><img src="clip_image018.jpg" alt="img"></p>
<p>派生类信用账户的实现：</p>
<p><img src="clip_image020.jpg" alt="img"></p>
<p>4.4     系统测试</p>
<p>能够正常完成信用账户的借款，还款，计息，以及计算年费的操作符合设计预期。</p>
<p><img src="clip_image022.jpg" alt="img"></p>
<p>4.5     体会心得</p>
<ul>
<li>这一版本因为增加了一个与 储蓄账户 类似的 信用账户类的需求，所以为了简化实现，同时减少代码量，设计一个共同的父类 <code>Account</code> 类来派生出需要的两个子类。</li>
<li>此时就能十分明显的显示出面向对象编程设计软件在需求变更时的好处，开发者在更新时，只需要不断地增加新的功能模块，不用重构之前的内容，大大减小了开发的时间成本。</li>
</ul>
<h2 id="5-个人银行管理系统版本0-5"><a href="#5-个人银行管理系统版本0-5" class="headerlink" title="5 个人银行管理系统版本0.5"></a>5 个人银行管理系统版本0.5</h2><p>5.1     系统需求</p>
<p>实现交互，能够通过键盘输入，进行操作。改进测试方法，使其更便于操作，改进类之间的关系，使其更便于调用。</p>
<p>5.2     系统设计</p>
<p>将 <code>Account</code> 设置为抽象类，将相应函数设计为抽象函数，存钱 <code>deposit（）</code>、取钱 <code>withdraw（）</code>、结算 <code>settle（）</code>。并设置<code>Account</code>类类型的数组，实现循环调用等操作。</p>
<p>5.3     系统实现</p>
<ul>
<li>类类型数组 <code>accounts[] </code>定义</li>
</ul>
<p><img src="clip_image024.jpg" alt="img"></p>
<ul>
<li>循环交互实现</li>
</ul>
<p><img src="clip_image026.jpg" alt="img"></p>
<ul>
<li>父类<code>Account</code>的抽象函数</li>
</ul>
<p><img src="clip_image028.jpg" alt="img"></p>
<ul>
<li>子类<code> SavingsAccount</code> 储蓄账户类的实例化</li>
</ul>
<p><img src="clip_image030.jpg" alt="img"></p>
<ul>
<li>子类 <code>CreditAccount</code> 信用账户类的实例化</li>
</ul>
<p><img src="clip_image032.jpg" alt="img"></p>
<p>5.4     系统测试</p>
<p>交互测试，分别测试了存钱，取钱，下一个月，结算年息等等，符合设计要求。</p>
<p><img src="clip_image034.jpg" alt="img"></p>
<p>5.5     体会心得</p>
<p>能够交互的测试，使得系统更直观，更贴近实际，用户能更方便的操作该系统。类类型的数组的使用使得代码中类的循环能更方便的实现，而抽象类的运用就能够实现类类型的数组。</p>
<h2 id="6、个人银行管理系统版本0-6"><a href="#6、个人银行管理系统版本0-6" class="headerlink" title="6、个人银行管理系统版本0.6"></a>6、个人银行管理系统版本0.6</h2><p>6.1     系统需求</p>
<p>在上一版本中，使用父类对象数组来处理不同派生类对象，从而实现多态性调用，第六个版本中使用<code>Java</code>中自带的<code>ArrayList</code>来代替原来的对象数组，以实现动态的改变大小，添加新账户的功能。系统设计</p>
<p>6.2     系统实现</p>
<p>在主函数类中导入Java实用包中的<code>ArrayList</code>，创建对象数组。</p>
<p><img src="clip_image036.jpg" alt="img"></p>
<p><img src="clip_image038.jpg" alt="img"></p>
<p>6.3     系统测试</p>
<p><img src="clip_image040.jpg" alt="img"></p>
<p>6.4     体会心得</p>
<p>相较于<code>C++</code>，<code>Java</code>提供了现成的包 <code>ArrayList</code> 不需要单独写，同时，<code>Java</code>也不支持重载。相较于上一个版本，能够更便捷的统一管理它的子类，代码能够更便捷。</p>
<h1 id="三、课程设计总结"><a href="#三、课程设计总结" class="headerlink" title="三、课程设计总结"></a>三、课程设计总结</h1><h2 id="1、最终实现功能："><a href="#1、最终实现功能：" class="headerlink" title="1、最终实现功能："></a>1、最终实现功能：</h2><p>日期计算功能、日期累加功能</p>
<p>储蓄账户 <code>SavingsAccount</code>（基本的账户信息的存储、按日期产生的利息）</p>
<p>信用账户 <code>CreditAccount</code>（基本的信用账户信息的存储、按日期产生的欠款金额、信用额度、年费）。</p>
<h2 id="2、Java特性"><a href="#2、Java特性" class="headerlink" title="2、Java特性"></a>2、Java特性</h2><p>1.1封装:</p>
<p>对于系统的每一个功能，如<code>Account</code>、<code>Date</code>、<code>SavingsAccount</code>、<code>CreditAccount</code>等功能都是用类实现的，其中每一个类中需要和外界通讯的数据成员、成员方法先定义了具体的权限，如public、protect等，而无需通讯的私有成员则为private，使得最后的各功能只提供一些接口参数，而不是具体的实现细节，使用（调用）者无需关心其内部的实现便可实现自己的功能。</p>
<p>1.2继承:</p>
<p>该系统设计了一个各账户共同的父类： <code>Account</code> ， 其他两个账户类都是由此继承出，他们有一些共同的方法、数据成员由父类实现（或声明），而其不同则由自己声明实现。</p>
<p>1.3多态:</p>
<p>对于一些子类继承自父类的数据成员，成员方法，他们中的一些的实现与父类略有不同，覆盖了原父类的内容，使得最后同一个方法有多种实现以供用户不同的需求。</p>
<h2 id="3、问题及解决方法："><a href="#3、问题及解决方法：" class="headerlink" title="3、问题及解决方法："></a>3、问题及解决方法：</h2><p>3.1关于运算符重载：<code>C++</code>中有运算符重载的功能，可以简单的实现两个类之间逻辑上的四则运算，通过查阅资料后得知Java中取消了运算符重载的功能，统一使用方法调用来代替原有功能。</p>
<p>3.2文档及注释：通过搜索别人博客了解到<code>Java</code>可以通过一些具体的语法格式进行注释，之后便可自动生成文档。</p>
<p>3.3工程规范性：一开始不能很清楚的理解<code>Java</code>的文件结构，新建了很多工程，文件混乱，后学习发现，应该在一个工作环境中新建不同的包。</p>
<p>3.4数学函数：使用某些数学公式时，<code>C++</code>需要写<code>cmath</code>的头文件，而<code>JAVA</code>则直接用<code>Math</code>即可。</p>
<p>3.5父类与子类：在使用父类引用指向子类对象的时候，要注意只能调用子类从父类继承过来的方法，如果要调用子类特有方法，需要向下转型。</p>
<p>3.6修改第五版，交互问题的时候，许多输入输出上格式的错误，对照<code>C++</code>的输出从类的<code>show（）</code>函数一点点修改，其中经过断点调试发现，<code>System.in.read()</code>读入了换行符<code>‘\n’</code>,使得显示用户信息后，输出两遍<code>‘commend&gt;’</code>,将输入修改为<code>cmd = in.next().charAt(0)</code>后，输入输出正确。</p>
<h2 id="4、收获："><a href="#4、收获：" class="headerlink" title="4、收获："></a>4、收获：</h2><p>​		这个银行管理系统的完成让我熟悉了<code>Java</code>的基本语法，同时体会到了<code>Java</code>与<code>c++</code>的不同的程序设计思想；在完成项目的同时遇到了很多的问题，但是都通过自己独立查阅资料逐一解决。了解到Java作为面向对象编程的语言实现项目代码时更具有工程规范性。实验报告的书写也使我清晰的认识到了一个简单项目从用户需求到系统设计、系统实现及最后的代码的编写测试这一个流程，最后的代码间的联系从而更加地清晰明了。</p>
<p>​		此外通过每一版本的需求的更新以及系统的实现，我体会到了面向对象程序设计在实现功能的过程与面向过程以及<code>C++</code>面向对象程序设计的不同，<code>Java</code>中万物皆为类的思想牢牢印在我的心中，即使和<code>C++</code>主函数同意义的<code>Main</code>方法一样也是类，从最开始的一个储蓄活期账户的功能的实现，<code>date</code>类的实现以及累加日期类的实现，从而实现了系统的基本功能，此后新增活期账户功能类似的信用账户的需求，通过比较两个类的共同特点，抽象出其共同的父类<code>Account</code>，这样使得一些共同点得以复用，减少代码量的同时也使得各类之间的关系增强，同时在最后几个版本中，因为<code>Java</code>中父类的引用同时可以引用其子类的特点，使得通过一个父类的对象数组便可以轻易的操纵其子类，使得最后的循环处理测试时的代码可以有不同类对应不同操作代码合二为一，大大的使程序的可读性增强，代码量减少，开发的负担也减轻许多，最后的<code>ArrayList</code>声明的对象数组也使得开发者不必关心数组空间的分配问题，从而使程序的安全性增强。</p>
<p>​		<code>Java</code>的工程设计结构，能够十分方便的不断扩展功能模块，所以需要设计者在设计时，需要有清晰的思路，有一定的预见性，给程序设计足够的修改，进步空间。也了解到了几个<code>Java</code>设计的基本原则，其中印象深刻的有，开闭原则：在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。而抽象化是开闭原则的关键。想要达到这样的效果，我们需要使用接口和抽象类。该项目中，就是<code>Account</code>及其子类的关系。以及单一职责原则：定义：类的职责要单一，不能将太多的职责放在一个类中，因为一个类职责越多，被复用的可能性越小，粒度越小越可能被复用。单一原则是针对实现类的设计模式。比如<code>Date</code>类和<code>Accumulate</code> 类，都是单独实现一个小的功能。</p>
<p>​		最后，这个项目虽然是修改，代码量并不多，但是真真正正第一次体会了一个小的系统，功能很少的系统，是如何一步步不断完善，有越来越多的功能，越来越庞大。</p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>course</tag>
        <tag>report</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo Blog搭建</title>
    <url>/Jmins0.github.io/2022/09/15/blog_learn/</url>
    <content><![CDATA[<h3 id="hexo基本操作"><a href="#hexo基本操作" class="headerlink" title="hexo基本操作"></a>hexo基本操作</h3><span id="more"></span>

<ul>
<li>$ hexo \ c –&gt; hexo\ clean $ 清空缓存</li>
<li>$ hexo\ g –&gt; hexo\ generate $  生成网站静态文件到默认设置的public文件夹</li>
<li>$ hexo\ d –&gt; hexo\ deploy$  自动生成网站静态文件，并部署到设定仓库</li>
<li>$ hexo\ s –&gt; hexo\ server $ 启动本地服务器</li>
</ul>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><ol>
<li><p>下载主题文件到  <code>themes</code> 文件夹 </p>
</li>
<li><p>修改站点配置文件 <code> _config.yml</code>   </p>
<p>找到 $ themes $ 这一行，修改为对应主体名字</p>
<p><img src="1.png" alt="image"></p>
</li>
</ol>
<h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><ol>
<li><p>修改站点配置文件 <code> _config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置部署</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span>  <span class="string">git</span> <span class="comment"># 规定</span></span><br><span class="line">  <span class="attr">repository:</span>  <span class="string">https://github.com/0Jmins0/Jmins0.github.io.git</span> <span class="comment">#仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span>  <span class="string">main</span> <span class="comment">#规定</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置url(否则部署到github上会显示不出来主题)</span></span><br><span class="line"><span class="attr">url:</span>  <span class="string">https://0jmins0.github.io/Jmins0.github.io</span></span><br><span class="line"><span class="attr">root:</span>  <span class="string">/Jmins0.github.io/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>根目录 $ hexo\ g + hexo\ d$ 部署到网站</p>
</li>
</ol>
<h3 id="加入数学插件"><a href="#加入数学插件" class="headerlink" title="加入数学插件"></a>加入数学插件</h3><ol>
<li><p>下载  <code>mathjax</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-math</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主题中的配置文件 <code>_config.yml</code> </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在文章中打开 <code>mathjax</code> 开关</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello word</span><br><span class="line"><span class="section">mathjax: true</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><ol>
<li>在主题配置文件 <code>_confid.yml</code>中 找到 <code>avatar</code> 去掉注释启用</li>
<li><code>round</code> 设置为 <code>true</code> ——&gt; 圆形头像</li>
<li>将 <code>next/images/avatar.gif</code> 替换为个人头像</li>
</ol>
<h3 id="设置标题、作者、连接"><a href="#设置标题、作者、连接" class="headerlink" title="设置标题、作者、连接"></a>设置标题、作者、连接</h3><p>打开根目录的配置文件，位置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">HiHi</span> <span class="string">的</span> <span class="string">Blog</span> <span class="comment">#标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span> <span class="comment">#副标题 </span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;欢迎来到我的小站！&#x27;</span> <span class="comment">#描述</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">HiHi</span> <span class="comment"># 作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 时区</span></span><br></pre></td></tr></table></figure>

<h3 id="设置侧边栏社交链接"><a href="#设置侧边栏社交链接" class="headerlink" title="设置侧边栏社交链接"></a>设置侧边栏社交链接</h3><p>打开主题配置文件，将相应连接启用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/0Jmins0/Jmins0.github.io</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="number">3234252073</span><span class="string">@qq.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="attr">Twitter:</span> <span class="string">https://twitter.com/yourname</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br></pre></td></tr></table></figure>

<h3 id="首页设置阅读全文"><a href="#首页设置阅读全文" class="headerlink" title="首页设置阅读全文"></a>首页设置阅读全文</h3><p>方法一：在主题配置文件搜索<code>auto_except</code> ，将 <code>enable</code> 改为 <code>true</code> 。</p>
<p>方法二：在文章中间添加 <code>&lt;!--more--&gt;</code>，则语句前面显示在预览中。</p>
<h3 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h3><ol>
<li><p>打开主题配置文件，搜索<code>canvas</code> 找到 <code>3D library</code></p>
</li>
<li><p>下载需要的依赖，到 <code>next/source/lib</code> 文件夹，并改名为 <code>three</code></p>
</li>
<li><p>下载依赖<code>https://github.com/theme-next/theme-next-canvas-nest</code>改名为<code>canvas-nest</code></p>
</li>
<li><p>修改主题配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="attr">three:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h3><ol>
<li><p>登录 <code>leanCloud</code> ，并创建 <code>APP</code>。</p>
</li>
<li><p>找到  <code>数据存储——结构化数据</code> 创建<code>Class</code> 命名为<code>Comment</code></p>
</li>
<li><p>找到<code>设置-应用凭证</code> 分别复制<code>AppID</code> <code>AppKey</code>到配置</p>
</li>
<li><p>修改主题配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">w0hgFFpgYXDb0kYsJiqe3NCG-gzGzoHsz</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">T65gVRVHNmIpYFP6QAUXbWB8</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">false</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>只在文章界面设置评论功能，关闭标签页等页面的评论功能</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comments:</span> <span class="literal">false</span><span class="string">//加在对应页面</span> <span class="string">.md文件的front</span> <span class="string">matter中</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><h3 id="添加插入图片功能"><a href="#添加插入图片功能" class="headerlink" title="添加插入图片功能"></a>添加插入图片功能</h3><ol>
<li><p>在博客根目录 <code>_config.yml</code>中，修改 <code>post_asset_folder:false</code>为 <code>true</code></p>
</li>
<li><p>在博客根目录打开 <code>git bash here</code> 下载 ：<code>npm install hexo-asseet-image --save</code></p>
</li>
<li><p>修改插件</p>
<ul>
<li>路径：根目录 –&gt;<code>node_modules</code> –&gt; <code>hexo-asset-image</code> –&gt;<code>index.js</code></li>
<li>第58行，修改<ul>
<li><code>$(this).attr(&#39;src&#39;, config.root + link + src);</code></li>
<li>改成<code>$(this).attr(&#39;src&#39;, src);</code></li>
</ul>
</li>
</ul>
</li>
<li><p>在和文章并列的地方新建和文章同名的文件夹，并在里面存放要引用的照片</p>
</li>
<li><p>引用方法：<code>![标注](test.jpg)</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello hexo</title>
    <url>/Jmins0.github.io/2022/09/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>start</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/Jmins0.github.io/2022/10/14/test/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>毛概期末复习笔记</title>
    <url>/Jmins0.github.io/2022/09/19/%E6%AF%9B%E6%A6%82/</url>
    <content><![CDATA[<h1 id="毛概期末复习"><a href="#毛概期末复习" class="headerlink" title="毛概期末复习"></a>毛概期末复习</h1><h3 id="👉-✔️1、毛泽东思想的主要内容（6条）"><a href="#👉-✔️1、毛泽东思想的主要内容（6条）" class="headerlink" title="👉 ✔️1、毛泽东思想的主要内容（6条）"></a>👉 ✔️1、毛泽东思想的主要内容（6条）</h3><ol>
<li>新民主主义革命理论</li>
<li>社会主义革命理论和社会主义建设理论</li>
<li>革命军队建设和军事战略理论</li>
<li>政策和策略的理论</li>
<li>思想政治工作和文化工作的理论</li>
<li>党的建设理论</li>
</ol>
<span id="more"></span>

<h3 id="👉✔️2、毛泽东思想活的灵魂（3条-解释）"><a href="#👉✔️2、毛泽东思想活的灵魂（3条-解释）" class="headerlink" title="👉✔️2、毛泽东思想活的灵魂（3条+解释）"></a>👉✔️2、毛泽东思想活的灵魂（3条+解释）</h3><ol>
<li>实事求是<ul>
<li>实事求是，就是一起从实际出发，理论联系实际，坚持在实践中检验真理和发展真理。</li>
<li>三点要求<ul>
<li>深入实际了解事物的本来面貌</li>
<li>清醒的认识和正确的把握我国基本国情</li>
<li>不断推进实践基础上的理论创新</li>
</ul>
</li>
</ul>
</li>
<li>群众路线<ul>
<li>群众路线，是我们党的生命线和根本工作路线，是我们永葆青春活力和战斗力的重要传家宝。</li>
<li>三点要求<ul>
<li>坚持人民是推动历史进程发展的根本力量</li>
<li>坚持全心全意为人民服务的根本宗旨</li>
<li>保持党同人民群众的血肉联系</li>
</ul>
</li>
</ul>
</li>
<li>独立自主<ul>
<li>独立自主，就是坚持独立思考，走自己的路，就是坚定不移的维护民族独立、捍卫国家主权，把立足点放在依靠自已力量的基础上，同时积极争取外援，开展国际经济文化交流，学习外国一切对哦我们有益的先进事物。</li>
<li>两点要求<ul>
<li>坚持中国的事情必须由中国人民自己处理。</li>
<li>坚持独立自主的和平外交政策，坚定不移走和平发展道路。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="✔️3、毛泽东思想形成的历史条件"><a href="#✔️3、毛泽东思想形成的历史条件" class="headerlink" title="✔️3、毛泽东思想形成的历史条件"></a>✔️3、毛泽东思想形成的历史条件</h3><p>1917年俄国十月革命的胜利开辟了世界无产阶级社会主义革命的新时代。它使中国反帝反封建的民主革命从旧的世界资产阶级民主革命的一部分，转变为新的世界无产阶级社会主义革命的一部分。</p>
<h3 id="👉✔️4、如何科学认识毛泽东思想的历史地位（3条）"><a href="#👉✔️4、如何科学认识毛泽东思想的历史地位（3条）" class="headerlink" title="👉✔️4、如何科学认识毛泽东思想的历史地位（3条）"></a>👉✔️4、如何科学认识毛泽东思想的历史地位（3条）</h3><ol>
<li>毛泽东思想是马克思主义中国化第一次历史性飞跃的理论成果，为中国特色社会主义理论体系的形成奠定了基础。</li>
<li>中国革命和建设的科学指南。<ul>
<li>结束了中国半殖民地半封建社会的历史，建立了中华人民共和国，确立了社会主义基本制度</li>
</ul>
</li>
<li>党和人民宝贵的精神财富<ul>
<li>艰苦奋斗勇于开拓进取的创业精神、以为人民服务为核心、集体主义为原则的价值观念</li>
</ul>
</li>
</ol>
<h3 id="✔️5、毛泽东的历史评价"><a href="#✔️5、毛泽东的历史评价" class="headerlink" title="✔️5、毛泽东的历史评价"></a>✔️5、毛泽东的历史评价</h3><p>无产阶级革命家、战略家、理论家、军事家（《中国共产党中央委员会关于建国以来若干历史问题的决议》没有军事家）</p>
<h3 id="✔️6、毛泽东思想转折、成熟"><a href="#✔️6、毛泽东思想转折、成熟" class="headerlink" title="✔️6、毛泽东思想转折、成熟"></a>✔️6、毛泽东思想转折、成熟</h3><p>正式提出马克思主义中国化的重要命题——六届六中全会，《论新阶段》</p>
<p>标志着趋于成熟的著作——《新民主主义论》</p>
<p>从萌芽走向成熟重要的转折——遵义会议</p>
<h3 id="👉✔️1、习思想形成的历史条件（3条）"><a href="#👉✔️1、习思想形成的历史条件（3条）" class="headerlink" title="👉✔️1、习思想形成的历史条件（3条）"></a>👉✔️1、习思想形成的历史条件（3条）</h3><ol>
<li>中国特色社会主义进入新时代</li>
<li>世界正经历百年未有之大变局</li>
<li>中华民族伟大复兴正处于关键时刻</li>
</ol>
<h3 id="⭐16、建设社会主义文化强国"><a href="#⭐16、建设社会主义文化强国" class="headerlink" title="⭐16、建设社会主义文化强国"></a>⭐16、建设社会主义文化强国</h3><ol>
<li>坚持马克思主义在意识形态领域指导地位的根本制度——本质要求<ol>
<li>把马克思主义指导地位贯穿到文化建设各方面</li>
<li>实施马克思主义理论研究和建设工程</li>
<li>加强和改进学校思想政治教育</li>
<li>落实意识形态工作责任制</li>
</ol>
</li>
<li>培育和践行社会主义核心价值观——精神纽带<ol>
<li>培育和践行社会主义核心价值观，要把社会主义核心价值观融入社会生活各个方面。</li>
<li>培育和践行社会主义核心价值观，要坚持全民行动、干部带头、从家庭做起、从娃娃抓起。</li>
<li>培育和践行社会主义核心价值观，必须立足中华优秀传统文化和革命文化</li>
<li>培育和践行社会主义核心价值观，还必须发扬中国人民在长期奋斗中培育、继承、发展起来的伟大民族精神。</li>
</ol>
</li>
<li>坚定文化自信、繁荣发展社会主义文化——精神家园<ol>
<li>培养高度文化自信。</li>
<li>提升公共文化服务水平。</li>
<li>健全现代化文化产业体系</li>
<li>提高国家文化软实力</li>
</ol>
</li>
</ol>
<h3 id="⭐17、如何建设美丽中国（2-11条）"><a href="#⭐17、如何建设美丽中国（2-11条）" class="headerlink" title="⭐17、如何建设美丽中国（2+11条）"></a>⭐17、如何建设美丽中国（2+11条）</h3><ol>
<li>坚持习近平生态文明思想<ol>
<li>坚持人与自然和谐共生</li>
<li>绿水青山就是金山银山</li>
<li>良好的生态环境是最普惠的民生福祉</li>
<li>统筹山水林田湖草沙系统治理</li>
<li>用最严格制度最严密法治保护生态环境</li>
<li>共谋全球生态文明建设</li>
</ol>
</li>
<li>推动绿色发展，促进人与自然和谐共生<ol>
<li>加快生态文明体系建设</li>
<li>全面推动绿色发展</li>
<li>有效防范生态环境风险</li>
<li>提高环境治理水平</li>
<li>深入推进生态文明体制改革</li>
</ol>
</li>
</ol>
<h3 id="⭐24、如何把全面从严治党引向深入"><a href="#⭐24、如何把全面从严治党引向深入" class="headerlink" title="⭐24、如何把全面从严治党引向深入"></a>⭐24、如何把全面从严治党引向深入</h3><ol>
<li>把党的政治建设摆在首位。</li>
<li>加强党的思想建设</li>
<li>加强党的组织建设</li>
<li>加强党的作风建设</li>
<li>加强党的纪律建设</li>
<li>将制度建设贯穿党的各项建设之中。</li>
<li>巩固发展反腐败斗争压倒性胜利</li>
</ol>
<h3 id="👉28、推动建设新型国际关系（多选）"><a href="#👉28、推动建设新型国际关系（多选）" class="headerlink" title="👉28、推动建设新型国际关系（多选）"></a>👉28、推动建设新型国际关系（多选）</h3><ol>
<li>维护世界和平、促进共同发展，是中国外交政策的宗旨</li>
<li>推动建设新型国际关系，要坚决维护国家核心利益</li>
<li>推动建设新型国际关系、要在和平共处五项原则基础上发展同世界各国的友好合作。</li>
<li>推动建设新型国际关系，要积极参与全球治理体系改革和建设</li>
<li>推动建设新型国际关系，要加强涉外法律工作，完善涉外法律法规体系。</li>
<li>广交朋友，诚待天下，是中华民族的光荣传统。</li>
</ol>
<h3 id="⭐34、新型国际关系"><a href="#⭐34、新型国际关系" class="headerlink" title="⭐34、新型国际关系"></a>⭐34、新型国际关系</h3><ul>
<li>新型国际关系：相互尊重、公平正义、合作共赢</li>
<li>和平共处五项原则：互相尊重主权和领土完整，互不侵犯，互不干涉内政，平ঈ互惠，和平共处</li>
<li>如何建设新型国际关系？<ul>
<li>①坚决维护国家核心利益</li>
<li>②要在和平共处五项原则基础上发展同世界各国的友好合作。</li>
<li>③要积极参与全球治理体系改革和建设。</li>
<li>④要加强涉外法律工作，完善涉外法律体系。</li>
</ul>
</li>
</ul>
<h3 id="⭐29、人类命运共同体的内涵"><a href="#⭐29、人类命运共同体的内涵" class="headerlink" title="⭐29、人类命运共同体的内涵"></a>⭐29、人类命运共同体的内涵</h3><ol>
<li>政治上，要互相尊、平等协商，坚决摒弃冷战思维和强权政治，走对话而不对抗、结伴而不结盟的国与国交往新思路。</li>
<li>经济上，要同舟共济，促进贸易和投资自由化便利化，推动经济全球化朝着更加开放、包容、普惠、平衡、共赢的发展方向。</li>
<li>文化上，要尊重世界文明多样性，促进文化交流、加强文明互鉴、实现文明共存。</li>
<li>生态上，要坚持环境友好，合作应对气候变化。保护好人类赖以生存的地球家园。</li>
<li>安全上，要坚持以对话解决争端、以协商化解分歧，统筹应对传统和非传统安全威胁，反对一切形式的恐怖主义。</li>
</ol>
<h1 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h1><h2 id="👉-✔️1、马克思主义中国化的内涵"><a href="#👉-✔️1、马克思主义中国化的内涵" class="headerlink" title="👉 ✔️1、马克思主义中国化的内涵"></a>👉 ✔️1、马克思主义中国化的内涵</h2><p>马克思主义中国化就是：</p>
<ol>
<li>将马克思主义基本原理同中国具体实际和时代特征相结合，运用马克思主义的立场、观点、方法研究和解决中国革命、建设、改革中的实际问题</li>
<li>总结和提炼中国革命、建设、改革的实践经验，从而认识和掌握客观规律，为马克思主义理论宝库增添新的内容</li>
<li>运用中国人民喜闻乐见的民族语言来阐述马克思主义理论，使之成为具有中国特色、中国风格、中国气派的马克思主义。</li>
<li>中国化包括：理论化，具体化，民族化（选择）</li>
</ol>
<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h3 id="✔️7、新民主主义革命的首要对象——帝国主义"><a href="#✔️7、新民主主义革命的首要对象——帝国主义" class="headerlink" title="✔️7、新民主主义革命的首要对象——帝国主义"></a>✔️7、新民主主义革命的首要对象——帝国主义</h3><h3 id="👉✔️8、新民主主义革命的总路线"><a href="#👉✔️8、新民主主义革命的总路线" class="headerlink" title="👉✔️8、新民主主义革命的总路线"></a>👉✔️8、新民主主义革命的总路线</h3><ul>
<li>集中表述：无产阶级领导的，人民大众的、反对帝国主义、封建主义和官僚资本主义的革命。（区别于政治纲领：推翻帝国主义和封建主义的统治，建立一个无产阶级领导的、以工农联盟为基础的、各革命阶级联合专政的新民主主义共和国）</li>
<li>新民主主义革命总路线反映了中国革命的基本规律，指明了中国革命的对象、动力、领导力量，是新民主主义革命的指导路线。</li>
<li>四个方面：<ul>
<li>对象：帝国主义（首要对象）、封建地主阶级、官僚资本主义 帝国主义是中国人民最凶恶的敌人，封建主义是中国进步的主要障碍，官僚资本主义的买办性、封建性、垄断性。0</li>
<li>动力：无产阶级（最基本）、农民阶级（主力军）、城市小资产阶级、民族资产阶级 根本动力是无产阶级与农民阶级</li>
<li>领导力量：无产阶级政党-中共</li>
<li>性质：资产阶级民主主义革命  前途：经过新民主主义逐渐过渡到社会主义。 建立无产阶级领导的各革命阶级的联合专政，不是无产阶级专政&#x2F;人民民主专政</li>
</ul>
</li>
</ul>
<h3 id="👉✔️9、新民主主义革命的领导力量——无产阶级及其政党"><a href="#👉✔️9、新民主主义革命的领导力量——无产阶级及其政党" class="headerlink" title="👉✔️9、新民主主义革命的领导力量——无产阶级及其政党"></a>👉✔️9、新民主主义革命的领导力量——无产阶级及其政党</h3><h3 id="⭐10、新民主主义革命的基本纲领（3条-解释）"><a href="#⭐10、新民主主义革命的基本纲领（3条-解释）" class="headerlink" title="⭐10、新民主主义革命的基本纲领（3条+解释）"></a>⭐10、新民主主义革命的基本纲领（3条+解释）</h3><ol>
<li>政治上，推翻帝国主义和封建主义的统治，建立一个无产阶级领导的、以工农联盟为基础的、各革命阶级联合专政的新民主主义共和国</li>
<li>经济上，没收封建主地主阶级的土地归农民所有，没收官僚资产阶级的垄断资本归新民主主义的国家所有，保护民族工商业。</li>
<li>文化上，必须要有与之相适应的新民主主义文化。新民主主义文化，就是无产阶级领导的人民大众的反帝反封建的文化，即民族的科学的大众的文化。</li>
</ol>
<h3 id="✔️经济纲领"><a href="#✔️经济纲领" class="headerlink" title="✔️经济纲领"></a>✔️经济纲领</h3><ul>
<li>没收封建主地主阶级的土地归农民所有，是新民主主义革命的主要内容。</li>
<li>没收官僚资产阶级的垄断资本归新民主主义的国家所有，是新民主主义革命的题中应有之义。</li>
<li>保护民族工商业，是新民主主义经济纲领中极具特色的一项内容。</li>
</ul>
<h3 id="✔️11、新民主主义革命的道路——农村包围城市，武装夺取政权"><a href="#✔️11、新民主主义革命的道路——农村包围城市，武装夺取政权" class="headerlink" title="✔️11、新民主主义革命的道路——农村包围城市，武装夺取政权"></a>✔️11、新民主主义革命的道路——农村包围城市，武装夺取政权</h3><h3 id="👉-✔️12、新民主主义革命道路形成的必然性"><a href="#👉-✔️12、新民主主义革命道路形成的必然性" class="headerlink" title="👉 ✔️12、新民主主义革命道路形成的必然性"></a>👉 ✔️12、新民主主义革命道路形成的必然性</h3><ol>
<li>一方面，在半殖民地半封建的中国社会，内无民主制度而受封建主义压迫，外无民族独立而受帝国主义的压迫。</li>
<li>另一方面，近代中国是一个农业大国，农民占全国人口的绝大多数，是无产阶级可靠的同盟军和革命的主力军。</li>
<li>中国革命之所以能走农村包围城市、武装夺取政权的道路，同样是由中国所处的时代特点和特殊国情决定的。&#x2F;&#x2F;可能性：</li>
<li>第一，近代中国是多个帝国主义间接统治的经济落后的半殖民地国家，社会政治经济发展极端不平衡，四分五裂，军阀割据，存在不少统治薄弱环节，为党在农村开展革命斗争、建设革命根据地提供了缝隙和可能。</li>
<li>第二，近代中国的广大农村深受反动统治阶级的多重压迫和剥削，人民革命愿望强烈，加之经历过大革命的洗礼，革命的群众基础好。</li>
<li>第三，全国革命形势的继续向前发展，为在农村建设革命根据地提供了客观条件。</li>
<li>第四，相当力量的正式红军的存在，为农村革命根据地的创立、巩固和发展提供了坚强后盾。</li>
<li>第五，党的领导力量及其政策的不错误，为农村革命根据地建设和发展提供了重要的主观条件。</li>
</ol>
<h3 id="13、中国革命道路的意义-x2F-反映了"><a href="#13、中国革命道路的意义-x2F-反映了" class="headerlink" title="13、中国革命道路的意义&#x2F;反映了"></a>13、中国革命道路的意义&#x2F;反映了</h3><ol>
<li>反映了中国半殖民地半封建社会民主革命发展的客观规律，从中国实际出发，开辟了引导中国革命走向胜利的正确道路。</li>
<li>独创性的发展了马列主义。</li>
<li>对推进马克思主义中国化具有重要的方法论意义。</li>
</ol>
<h3 id="👉-✔️14、新民主主义的三大法宝及其关系"><a href="#👉-✔️14、新民主主义的三大法宝及其关系" class="headerlink" title="👉 ✔️14、新民主主义的三大法宝及其关系"></a>👉 ✔️14、新民主主义的三大法宝及其关系</h3><ol>
<li>统一战线，统一战线问题是无产阶级政党策略思想的重要内容。建立最广泛的统一战线，首先是由中国半殖民地半封建社会的阶级状况所决定的。</li>
<li>武装斗争，武装斗争是中国革命的特点和优点之一。</li>
<li>党的建设，中国共产党要领导革命取得胜利，必须不断加强党的思想建设、组织建设和作风建设。</li>
<li>关系：三个法宝相互联系、辩证统一。 统一战线和武装斗争是中国革命的两个基本特点，是战胜敌人的两个基本武器。 统一战线是实行武装斗争的统一战线，武装斗争是统一战线的中心支柱，党的组织则是掌握统一战线和武装斗争这两个武器以实行对敌冲锋陷阵的英勇战士。</li>
</ol>
<h3 id="✔️15、党的三个优良作风"><a href="#✔️15、党的三个优良作风" class="headerlink" title="✔️15、党的三个优良作风"></a>✔️15、党的三个优良作风</h3><ol>
<li>理论联系实际</li>
<li>密切联系群众</li>
<li>批评与自我批评</li>
</ol>
<h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h3 id="👉✔️16、党在过渡时期的总共路线——“一化三改”"><a href="#👉✔️16、党在过渡时期的总共路线——“一化三改”" class="headerlink" title="👉✔️16、党在过渡时期的总共路线——“一化三改”"></a>👉✔️16、党在过渡时期的总共路线——“一化三改”</h3><p>“一化”即社会主义工业化，“三改”即对个体农业、手工业和资本主义工商业的社会主义改造。它们之间相互联系，不可分离，可以比喻为鸟的“主体”和“两翼”，”一化“是”主体“，”三改“是”两翼“。</p>
<h3 id="⭐17、社会主义改造的历史经验（3条）"><a href="#⭐17、社会主义改造的历史经验（3条）" class="headerlink" title="⭐17、社会主义改造的历史经验（3条）"></a>⭐17、社会主义改造的历史经验（3条）</h3><ol>
<li>坚持社会主义工业化建设与社会主义改造同时并举。</li>
<li>采取积极引导、逐步过渡的方式。</li>
<li>用和平方法进行改造。</li>
</ol>
<h3 id="✔️18、初步探索阶段的理论成果（3条）"><a href="#✔️18、初步探索阶段的理论成果（3条）" class="headerlink" title="✔️18、初步探索阶段的理论成果（3条）"></a>✔️18、初步探索阶段的理论成果（3条）</h3><ol>
<li>调动一切积极因素为社会主义事业服务。</li>
<li>正确认识和处理社会主义矛盾的思想。</li>
<li>走中国工业化道路的思想。</li>
</ol>
<h3 id="19、十大关系"><a href="#19、十大关系" class="headerlink" title="19、十大关系"></a>19、十大关系</h3><ol>
<li>重工业和轻工业、农业的关系</li>
<li>沿海工业和内地工业的关系</li>
<li>经济建设和国防建设的关系</li>
<li>国家、生产单位和生产者个人的关系</li>
<li>中央和地方的关系</li>
<li>汉族和少数民族的关系</li>
<li>党和非党的关系</li>
<li>革命和反革命的关系</li>
<li>是非关系</li>
<li>中国和外国的关系</li>
</ol>
<h3 id="20、走中国工业化道路（选择）"><a href="#20、走中国工业化道路（选择）" class="headerlink" title="20、走中国工业化道路（选择）"></a>20、走中国工业化道路（选择）</h3><ul>
<li>三个主体、三个补充——陈云</li>
<li>主义发展手工业和农业多种经营的思想——朱德</li>
</ul>
<h3 id="👉21、党对社会主义建设道路的初步探索有哪些经验教训？（不重要）"><a href="#👉21、党对社会主义建设道路的初步探索有哪些经验教训？（不重要）" class="headerlink" title="👉21、党对社会主义建设道路的初步探索有哪些经验教训？（不重要）"></a>👉21、党对社会主义建设道路的初步探索有哪些经验教训？（不重要）</h3><ol>
<li>必须把马克思主义与中国实际相结合，探索符合中国特点的社会主义建设道路；</li>
<li>必须正确认识社会主义社会的主要矛盾和根本任务，集中力量发展生产力；</li>
<li>必须从实际出发进行社会主义建设，建设规模和速度要和国力相适应 ；</li>
<li>必须发展社会主义民主，健全社会主义法制；</li>
<li>必须坚持党的民主集中制和集体领导制度， 加强执政党建设；</li>
<li>必须坚持对外开放，不能关起门来搞建设，要借鉴和吸收人类文明的共同成果建设社会主义；</li>
</ol>
<h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><p>什么是社会主义，怎样建设社会主义</p>
<h3 id="1、邓小平理论的主要内容（10条）"><a href="#1、邓小平理论的主要内容（10条）" class="headerlink" title="1、邓小平理论的主要内容（10条）"></a>1、邓小平理论的主要内容（10条）</h3><ol>
<li>解放思想，实事求是的思想路线</li>
<li>社会主义初级阶段理论</li>
<li>党的基本路线</li>
<li>社会主义根本任务的理论</li>
<li>“三步走”战略</li>
<li>改革开放理论</li>
<li>社会主义市场经济理论</li>
<li>“两手抓，两手都要硬”</li>
<li>“一国两制”</li>
<li>中国问题关键在于党</li>
</ol>
<h3 id="👉✔️2、社会主义党的基本路线"><a href="#👉✔️2、社会主义党的基本路线" class="headerlink" title="👉✔️2、社会主义党的基本路线"></a>👉✔️2、社会主义党的基本路线</h3><p>党的十三大（十九大）提出：</p>
<p>领导和团结全国各族人民，以经济建设为中心，坚持四项基本原则，坚持改革开放，自立更生，独立自主，为把我国建设成富强、民主、文明、（和谐、美丽）的社会主义现代化国家（强国）而奋斗。</p>
<h3 id="👉✔️3、如何理解改革开放理论。（6条）"><a href="#👉✔️3、如何理解改革开放理论。（6条）" class="headerlink" title="👉✔️3、如何理解改革开放理论。（6条）"></a>👉✔️3、如何理解改革开放理论。（6条）</h3><ol>
<li>改革是社会主义社会发展的直接动力</li>
<li>改革是一项崭新的事业，是一个大试验</li>
<li>开放也是改革，对外开放是建设中国特色社会主义的一项基本国策</li>
<li>对外开放，包括对发达国家的开放，也包括对发展中国家的开放</li>
<li>实行对外开放要正确对待资本主义社会创造的现代文明成果</li>
<li>对外开放要高度珍惜并坚决维护中国人民经过长期奋斗得来的独立自主的权利益。</li>
</ol>
<h3 id="👉✔️4、如何认识邓小平理论的历史地位？"><a href="#👉✔️4、如何认识邓小平理论的历史地位？" class="headerlink" title="👉✔️4、如何认识邓小平理论的历史地位？"></a>👉✔️4、如何认识邓小平理论的历史地位？</h3><ol>
<li><p>马克思列宁主义、毛泽东思想的继承和发展；</p>
<p>邓小平理论坚持解放思想、实事求是，在新的实践基础上继承前人又突破陈规，开拓了马克思主义的新境界。</p>
</li>
<li><p>中国特色社会主义理论体系的开篇之作；</p>
<p>邓小平理论第一次比较系统地初步回答了中国社会主义的发展道路、发展阶段、根本任务、发展动力、外部条件、政治保证、战略步骤、党的领导和依靠力量以及祖国统一等一系列基本问题，指导我们党制定了在社会主义初级阶段的基本路线。</p>
</li>
<li><p>改革开放和社会主义现代化建设的科学指南</p>
<p>强调必须坚持以经济建设为中心，坚持四项基本原则，坚持改革开放，制定了社会主义初级阶段的基本路线，制定了现代化建设“三步走”战略等等。</p>
</li>
</ol>
<h1 id="第六章-“三个代表”重要思想"><a href="#第六章-“三个代表”重要思想" class="headerlink" title="第六章 “三个代表”重要思想"></a>第六章 “三个代表”重要思想</h1><h3 id="👉✔️5、“三个代表”重要思想的核心观点。（3条）"><a href="#👉✔️5、“三个代表”重要思想的核心观点。（3条）" class="headerlink" title="👉✔️5、“三个代表”重要思想的核心观点。（3条）"></a>👉✔️5、“三个代表”重要思想的核心观点。（3条）</h3><p>中国共产党必须始终代表中国先进生产力的发展要求，代表中国先进文化的前进方向，代表中国最广大人民的根本利益</p>
<ol>
<li>始终代表中国先进生产力的发展要求。社会主义的根本任务是发展社会生产力， 马克思主义执政党必须高度重视解放和发展生产力。</li>
<li>始终代表中国先进文化的前进方向。大力发展社会主义先进文化，必须牢牢把握先进文化的前进方向，建设社会主义精神文明，不断满足人民群众日益增长的精神文化需求，不断丰富人民的精神世界，增强人民的精神力量。</li>
<li>始终代表中国最广大人民的根本利益。我们党来自于人民，植根于人民，服务于人民。始终坚持人民的利益高于一切。</li>
</ol>
<h3 id="6、“三个代表”重要思想的主要内容-x2F-科学内涵"><a href="#6、“三个代表”重要思想的主要内容-x2F-科学内涵" class="headerlink" title="6、“三个代表”重要思想的主要内容&#x2F;科学内涵"></a>6、“三个代表”重要思想的主要内容&#x2F;科学内涵</h3><ol>
<li>发展是党执政兴国的第一要务</li>
<li>建立社会主义市场经济体制</li>
<li>全面建设小康社会</li>
<li>建设社会主义政治文明</li>
<li>推就党的建设新的伟大工程</li>
</ol>
<h3 id="⭐7、如何建立社会主义市场经济体制（5条）"><a href="#⭐7、如何建立社会主义市场经济体制（5条）" class="headerlink" title="⭐7、如何建立社会主义市场经济体制（5条）"></a>⭐7、如何建立社会主义市场经济体制（5条）</h3><p>社会主义市场经济体制是市场经济同我国社会主义基本制度结合在一起的，既可以发挥市场经济的长处，又可以发挥社会主义制度的优越性。必须毫不动摇地巩固和发展公有制经济，必须毫不动摇地鼓励、支持、引导非公有制经济发展。</p>
<ol>
<li>坚持和完善公有制为主体、多种所有制经济共同发展的社会主义基本经济制度（混合经济）</li>
<li>探索公有制的多种有效实现形式，积极推进经济改革（股份制）</li>
<li>发挥市场机制的作用和国家的宏观调控。</li>
<li>理顺分配关系，生产要素按贡献参与分配，完善按劳分配为主体多种分配方式并存的分配制度</li>
<li>建立和完善社会保障体系</li>
</ol>
<h1 id="第七章-科学发展观"><a href="#第七章-科学发展观" class="headerlink" title="第七章 科学发展观"></a>第七章 科学发展观</h1><h3 id="👉✔️8、如何把握科学发展观的科学内涵。"><a href="#👉✔️8、如何把握科学发展观的科学内涵。" class="headerlink" title="👉✔️8、如何把握科学发展观的科学内涵。"></a>👉✔️8、如何把握科学发展观的科学内涵。</h3><p>第一要义：发展</p>
<p>核心：以人为本</p>
<p>基本要求：全面协调可持续</p>
<p>根本方法：统筹兼顾</p>
<p>精神实质：解放思想、实事求是、与时俱进、求真务实</p>
<h1 id="第八章-习近平新时代中特色社思想及其历史地位"><a href="#第八章-习近平新时代中特色社思想及其历史地位" class="headerlink" title="第八章 习近平新时代中特色社思想及其历史地位"></a>第八章 习近平新时代中特色社思想及其历史地位</h1><h3 id="2、四大考验、四大危险（选择）"><a href="#2、四大考验、四大危险（选择）" class="headerlink" title="2、四大考验、四大危险（选择）"></a>2、四大考验、四大危险（选择）</h3><p>考验</p>
<ol>
<li>长期执政考验</li>
<li>改革开放考验</li>
<li>市场经济考验</li>
<li>外部环境考验</li>
</ol>
<p>危险</p>
<ol>
<li>精神懈怠威胁</li>
<li>能力不足危险</li>
<li>脱离群众危险</li>
<li>消极腐败危险</li>
</ol>
<h3 id="⭐3、习新中特色社思想的理论特质（6条）"><a href="#⭐3、习新中特色社思想的理论特质（6条）" class="headerlink" title="⭐3、习新中特色社思想的理论特质（6条）"></a>⭐3、习新中特色社思想的理论特质（6条）</h3><ol>
<li>秉承人民之上</li>
<li>彰显历史自觉</li>
<li>坚持实事求是</li>
<li>突出问题导向</li>
<li>强化战略思维</li>
<li>发扬斗争精神</li>
</ol>
<h3 id="👉✔️4、习新思中特色社思想的历史地位（5条）"><a href="#👉✔️4、习新思中特色社思想的历史地位（5条）" class="headerlink" title="👉✔️4、习新思中特色社思想的历史地位（5条）"></a>👉✔️4、习新思中特色社思想的历史地位（5条）</h3><ol>
<li>当代中国马克思主义、21世纪马克思主义</li>
<li>实现中华民族伟大复兴的行动指南</li>
<li>建设美好世界的中国智慧和中国方案</li>
<li>体现中华文化和中国精神的时代精神</li>
<li>马克思主义中国化新的飞跃</li>
</ol>
<h1 id="第九章-坚持和发展中国特色社会主义的总任务"><a href="#第九章-坚持和发展中国特色社会主义的总任务" class="headerlink" title="第九章 坚持和发展中国特色社会主义的总任务"></a>第九章 坚持和发展中国特色社会主义的总任务</h1><h3 id="✔️5、中国梦的科学内涵（多选）"><a href="#✔️5、中国梦的科学内涵（多选）" class="headerlink" title="✔️5、中国梦的科学内涵（多选）"></a>✔️5、中国梦的科学内涵（多选）</h3><ol>
<li>国家富强</li>
<li>民族振兴</li>
<li>人民幸福</li>
<li>关系：中国梦坚持国家富强，民族振兴和人民幸福的内在统一。</li>
</ol>
<h3 id="👉✔️6、如何奋力实现中国梦（4条）"><a href="#👉✔️6、如何奋力实现中国梦（4条）" class="headerlink" title="👉✔️6、如何奋力实现中国梦（4条）"></a>👉✔️6、如何奋力实现中国梦（4条）</h3><ol>
<li>必须走中国道路</li>
<li>必需弘扬中国精神</li>
<li>必须凝聚中国力量</li>
<li>是海内外中华儿女共同的梦</li>
<li>实干才能梦想成真</li>
</ol>
<h3 id="👉✔️7、现代化强国战略安排-x2F-两个15年-x2F-现代化建设新征程-x2F-两步走"><a href="#👉✔️7、现代化强国战略安排-x2F-两个15年-x2F-现代化建设新征程-x2F-两步走" class="headerlink" title="👉✔️7、现代化强国战略安排&#x2F;两个15年&#x2F;现代化建设新征程&#x2F;两步走"></a>👉✔️7、现代化强国战略安排&#x2F;两个15年&#x2F;现代化建设新征程&#x2F;两步走</h3><ol>
<li>第一个阶段：从2020年到2035年，在全面建设小康社会的基础上，再奋斗15年，基本实现现代化。</li>
<li>第二个阶段：从2035到本世纪中叶，在基本实现现代化的基础上，再奋斗15年，把我国建设成富强民主文明和谐美丽的社会主义现代化强国。</li>
</ol>
<h3 id="👉✔️8、建设社会主义现代化国家的战略导向"><a href="#👉✔️8、建设社会主义现代化国家的战略导向" class="headerlink" title="👉✔️8、建设社会主义现代化国家的战略导向"></a>👉✔️8、建设社会主义现代化国家的战略导向</h3><ol>
<li>立足新发展阶段</li>
<li>贯彻新发展理念<ul>
<li>新发展理念：创新、协调、绿色、开放、共享</li>
<li>创新：引领发展的第一动力、核心位置</li>
<li>协调： 持续健康发展的内在要求</li>
<li>开放：国家繁荣发展的必由之路</li>
<li>共享：中国特色社会主义的本质要求</li>
</ul>
</li>
<li>构建新发展格局<ul>
<li>内涵：立足新发展阶段，贯彻新发展理念，要致力构建以国内大循环为主体，国内国际双循环相互促进的新发展格局。</li>
</ul>
</li>
</ol>
<h1 id="第十章-“五位一体”总布局"><a href="#第十章-“五位一体”总布局" class="headerlink" title="第十章 “五位一体”总布局"></a>第十章 “五位一体”总布局</h1><h3 id="⭐9、坚持习近平经济思想"><a href="#⭐9、坚持习近平经济思想" class="headerlink" title="⭐9、坚持习近平经济思想"></a>⭐9、坚持习近平经济思想</h3><ol>
<li>坚持加强党对经济工作的集中统一领导</li>
<li>坚持以人民为中心的发展思想</li>
<li>坚持适应把握引领经济发展新常态</li>
<li>坚持使市场在资源配置中起决定性作用</li>
<li>坚持适应我国经济发展主要矛盾变化完善宏观调控</li>
<li>坚持问题导向部署经济发展新战略</li>
<li>坚持正确工作策略和方法</li>
</ol>
<h3 id="10、深化供给侧改革——巩固、增强、提升、畅通"><a href="#10、深化供给侧改革——巩固、增强、提升、畅通" class="headerlink" title="10、深化供给侧改革——巩固、增强、提升、畅通"></a>10、深化供给侧改革——巩固、增强、提升、畅通</h3><h3 id="👉-✔️11、供给侧内容（5条）"><a href="#👉-✔️11、供给侧内容（5条）" class="headerlink" title="👉 ✔️11、供给侧内容（5条）"></a>👉 ✔️11、供给侧内容（5条）</h3><ol>
<li>推进增长动能转换，加快实施创新驱动发展战略</li>
<li>深化要素市场化配置，实现由以价取胜向以质取胜的转变</li>
<li>加大人力资源培育力度，更加注重调动和保护人的积极性</li>
<li>激发各类市场的主体活力，加快建设世界一流企业。</li>
<li>持续推进“三去一降一补”，优化市场供求需求。<ul>
<li>三去：去产能、去库存、去杠杆、</li>
<li>一降：降成本</li>
<li>一补：补短板</li>
</ul>
</li>
</ol>
<h3 id="👉✔️12、坚持走中国特色社会主义政治发展道路"><a href="#👉✔️12、坚持走中国特色社会主义政治发展道路" class="headerlink" title="👉✔️12、坚持走中国特色社会主义政治发展道路"></a>👉✔️12、坚持走中国特色社会主义政治发展道路</h3><ol>
<li>走中国特色社会主义政治发展道路，必须坚持党的领导、人民当家作主、依法治国有机统一。</li>
<li>走中国特色社会主义政治发展道路，必须坚持正确的政治方向。</li>
<li>走中国特色社会主义政治发展道路，必须积极稳妥推进政治体制改革。</li>
</ol>
<h3 id="✔️13、四梁八柱"><a href="#✔️13、四梁八柱" class="headerlink" title="✔️13、四梁八柱"></a>✔️13、四梁八柱</h3><ol>
<li>人民代表大会制度——根本政治制度</li>
<li>中国共产党领导的多党合作和政治协商制度——基本政治制度、新型政党制度</li>
<li>民族区域自治——基本政治制度</li>
<li>基层群众自治制度——基本政治制度</li>
</ol>
<h3 id="✔️14、协商民主"><a href="#✔️14、协商民主" class="headerlink" title="✔️14、协商民主"></a>✔️14、协商民主</h3><ul>
<li>是中国社会主义民主政治中独特的、独有的、独到的民主形式。</li>
</ul>
<h3 id="15、统一战线的历史意义（选择）"><a href="#15、统一战线的历史意义（选择）" class="headerlink" title="15、统一战线的历史意义（选择）"></a>15、统一战线的历史意义（选择）</h3><ol>
<li>中国共产党凝聚人心、汇聚力量的政治优势和战略方针</li>
<li>是增强党的阶级基础、扩大党的群众基础、巩固党的执政地位的重要法宝</li>
<li>是全面建设社会主义现代化国家、实现中华民族伟大复兴的重要法宝。</li>
</ol>
<h3 id="✔️18、碳达峰-x2F-碳中和"><a href="#✔️18、碳达峰-x2F-碳中和" class="headerlink" title="✔️18、碳达峰&#x2F;碳中和"></a>✔️18、碳达峰&#x2F;碳中和</h3><ul>
<li>碳达峰：我国承诺2030年前，二氧化碳的排放不再增长，达到峰值之后逐步降低。</li>
<li>碳中和：企业、团体或个人测算，在一定时间内直接或间接产生的温室气体排放总量，通过植树造林、节能减排等形式，抵消自身产生的二氧化碳排放量，实现二氧化碳“零排放”。</li>
</ul>
<h3 id="👉✔️19、如何在发展中保障和改善民生（5条）"><a href="#👉✔️19、如何在发展中保障和改善民生（5条）" class="headerlink" title="👉✔️19、如何在发展中保障和改善民生（5条）"></a>👉✔️19、如何在发展中保障和改善民生（5条）</h3><ol>
<li>建设高质量教育体系：百年大计，教育为本。</li>
<li>实施就业优先战略。就业是人民生存的经济基础和基础保障，是最大的民生工程、民心工程、根基工程。</li>
<li>优化收入分配结构。收入分配是民生之源，是改善民生、实现发展成果由人民共享最重要最直接的方式。</li>
<li>健全多层次社会保障体系。社会保障发挥着社会稳定器作用。</li>
<li>全面推进健康中国建设。人民健康长寿是民族昌盛和国家富强的重要标志。</li>
</ol>
<h3 id="20、枫桥经验"><a href="#20、枫桥经验" class="headerlink" title="20、枫桥经验"></a>20、枫桥经验</h3><ul>
<li>根本保证：党建统领</li>
<li>价值核心：人民主体</li>
<li>主要内容：自治、法治、德治“三治结合”</li>
<li>重要手段：人防、物防、技防、心防“四防并举”</li>
<li>基本格局：共建共治共享</li>
<li>目标效果：平安和谐</li>
</ul>
<h1 id="第十一章-“四个全面”战略布局"><a href="#第十一章-“四个全面”战略布局" class="headerlink" title="第十一章 “四个全面”战略布局"></a>第十一章 “四个全面”战略布局</h1><h3 id="👉-✔️21、中国社会主义现代化国家基本特征"><a href="#👉-✔️21、中国社会主义现代化国家基本特征" class="headerlink" title="👉 ✔️21、中国社会主义现代化国家基本特征"></a>👉 ✔️21、中国社会主义现代化国家基本特征</h3><ol>
<li>中国的现代化是人口规模巨大的现代化</li>
<li>中国的现代化是全体人民共同富裕的现代化</li>
<li>中国的现代化是物质文明和精神文明相协调的现代化</li>
<li>中国的现代化是人与自然和谐共生的现代化</li>
<li>中国的现代化是走和平发展道路的现代化</li>
</ol>
<h3 id="👉22、坚定不移推进全面深化改革（去年考过）"><a href="#👉22、坚定不移推进全面深化改革（去年考过）" class="headerlink" title="👉22、坚定不移推进全面深化改革（去年考过）"></a>👉22、坚定不移推进全面深化改革（去年考过）</h3><ol>
<li>必须坚持和完善中国特色社会主义制度和国家治理体系</li>
<li>始终站稳人民立场，坚持以人民为中心的改革价值取向。</li>
<li>坚持党对改革的集中统一领导。</li>
</ol>
<h3 id="👉-✔️23、全面深化依法治国实践（3条）"><a href="#👉-✔️23、全面深化依法治国实践（3条）" class="headerlink" title="👉 ✔️23、全面深化依法治国实践（3条）"></a>👉 ✔️23、全面深化依法治国实践（3条）</h3><ol>
<li>紧紧围绕全民推进依法治国总目标，加快建设中国特色社会主义法制体系。</li>
<li>准确把握全面推进依法治国工作布局，坚持依法治国、依法执政、依法行政共同推进，法治国家、法治政府、法治社会一体建设。</li>
<li>准确把握全面推进依法治国重点任务，着力推进科学立法、严格执法、公正司法、全民守法。</li>
</ol>
<h3 id="👉-✔️25、坚持走中国特色国家安全道路"><a href="#👉-✔️25、坚持走中国特色国家安全道路" class="headerlink" title="👉 ✔️25、坚持走中国特色国家安全道路"></a>👉 ✔️25、坚持走中国特色国家安全道路</h3><ol>
<li>坚持统筹发展和安全两件大事</li>
<li>坚持人民安全、政治安全、国家利益至上有机统一</li>
<li>坚持维护和塑造国家安全</li>
<li>坚持科学统筹的根本方法。</li>
<li>坚持党对国家安全工作的绝对领导</li>
</ol>
<h3 id="✔️26、新时代强军目标"><a href="#✔️26、新时代强军目标" class="headerlink" title="✔️26、新时代强军目标"></a>✔️26、新时代强军目标</h3><ol>
<li>听党指挥</li>
<li>能打胜仗</li>
<li>作风优良</li>
</ol>
<h3 id="👉-✔️27、如何全面准确贯彻一国两制方针（5条）"><a href="#👉-✔️27、如何全面准确贯彻一国两制方针（5条）" class="headerlink" title="👉 ✔️27、如何全面准确贯彻一国两制方针（5条）"></a>👉 ✔️27、如何全面准确贯彻一国两制方针（5条）</h3><ol>
<li>“一国两制”是国家的一项基本国策</li>
<li>必须始终准确把握“一国”和“两制”的关系。</li>
<li>必须始终落实中央对特别行政区全面管治权。</li>
<li>必须聚焦发展这个第一要务</li>
<li>必须坚持爱国者治港治澳原则</li>
</ol>
<h3 id="30、一带一路内涵"><a href="#30、一带一路内涵" class="headerlink" title="30、一带一路内涵"></a>30、一带一路内涵</h3><ul>
<li>核心内涵，促进基础设施建设和互联互通，加强经济政策协调和发展战略对接，促进协同联动发展，实现共同繁荣。</li>
</ul>
<h3 id="👉✔️31、中国特色社会主义最本质的特征"><a href="#👉✔️31、中国特色社会主义最本质的特征" class="headerlink" title="👉✔️31、中国特色社会主义最本质的特征"></a>👉✔️31、中国特色社会主义最本质的特征</h3><ol>
<li>党的领导是中国特色社会主义最本质的特征<ul>
<li>党的领导直接关系着中国特色社会主义的性质、方向、命运。</li>
<li>党的领导是实现社会主义现代化和民族复兴的最本质保证</li>
</ul>
</li>
<li>党的领导是中国特色社会主义制度的最大优势</li>
</ol>
<h3 id="👉-✔️32、新时代党的历史使命"><a href="#👉-✔️32、新时代党的历史使命" class="headerlink" title="👉 ✔️32、新时代党的历史使命"></a>👉 ✔️32、新时代党的历史使命</h3><ul>
<li>统揽伟大斗争、伟大工程、伟大事业、伟大梦想，在全面建设成小康社会的基础上全面建设社会主义现代化国家，实现中华民族伟大复兴的中国梦。</li>
</ul>
<h3 id="✔️33、四个自信的内涵"><a href="#✔️33、四个自信的内涵" class="headerlink" title="✔️33、四个自信的内涵"></a>✔️33、四个自信的内涵</h3><ul>
<li>道路自信、理论自信、制度自信、文化自信</li>
</ul>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>思政课</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA课程设计报告聊天室系统</title>
    <url>/Jmins0.github.io/2023/11/08/java_%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">项目 Guihub仓库链接 ： https://github.com/0Jmins0/chatroom</span><br></pre></td></tr></table></figure>





<h1 id="一、课程设计要求与目的"><a href="#一、课程设计要求与目的" class="headerlink" title="一、课程设计要求与目的"></a>一、课程设计要求与目的</h1><p>目的：编写一个局域网Java聊天室系统，掌握Java网络通信、多线程、IO文件操作等高级应用编程技能。</p>
<p>要求：以课堂所给示例为基础，编写一个小型Java聊天室系统。</p>
<p>完成如下功能：</p>
<ol>
<li><p>多客户端模式下，实现客户与客户的单独通信，要求信息通过服务器中转</p>
</li>
<li><p>端到端的通信，实现并行通信模式</p>
</li>
<li><p>实现端到端的文件传输</p>
</li>
<li><p>添加图形界面（选做）或其他新功能</p>
</li>
</ol>
<span id="more"></span>

<h1 id="二、系统设计与实现"><a href="#二、系统设计与实现" class="headerlink" title="二、系统设计与实现"></a>二、系统设计与实现</h1><p>1. </p>
<p><img src="003.jpg" alt="img"></p>
<p>设计原理与思想（Socket套接字通信原理，系统设计思想)</p>
<p> <img src="004.jpg" alt="img"></p>
<ol start="2">
<li>总体设计（类与类的关系）</li>
</ol>
<p> <img src="005.jpg" alt="img"></p>
<p><code>CorsConfig</code>类：解决跨域问题，前后端端口号不一样</p>
<p><code>SecurityConfig</code> 类：设置访问的接口的权限，可以直接访问的，需要登录才可以访问的， </p>
<p><code>Websocketconfig</code> 类：配置socket</p>
<p><code>WebsocketServer</code> 类：处理客户传输数据请求</p>
<p><code>User</code> 类：用户类，包括用户名，密码，id，等信息和数据库的列一一对应。</p>
<p><code>Posts</code> 类 ：帖子类，记录用户发布的帖子，用户ID ，和数据库对应</p>
<p><code>Mapper</code> 包：和数据库对接的，集成SQL语言，方便调用数据库</p>
<p><code>Controller</code> 包：获取用户信息、登录、注册的地址</p>
<p><code>service</code> 包：被Controller调用的接口</p>
<p><code>Service.Impl</code> 包：接口的具体实现</p>
<ol start="3">
<li>详细设计（单个类的设计，关键步骤或算法，不要贴代码）</li>
</ol>
<p>1）注册模块：</p>
<p>a. 获取前端传来的三个参数</p>
<p><img src="006.jpg" alt="img"></p>
<p>b. 先对数据是否合法进行判断，如用户名密码不能为空，用户名首尾不能有空格，长度不能超过100，用户名是否已经被注册，两次密码是否一致等。</p>
<p>c. 符合条件后，对密码进行加密，并存储到数据库</p>
<p><img src="007.jpg" alt="img"></p>
<p>2）登录模块：</p>
<p>a.获取用户的用户名和密码</p>
<p>b.将用户名和密码加密后，和数据库里的进行匹配</p>
<p><img src="008.jpg" alt="img"></p>
<p>c.匹配成功后，将 userID 封装成 JWT token 并返回给客户端</p>
<p><img src="009.jpg" alt="img"></p>
<p>d.客户端收到JWT后，会将其存到浏览器的内存中，可以实现刷新后无需再次登录。</p>
<p>e.退出登录后，会将浏览器存储的JWT删除。</p>
<p>3）获取用户信息模块：</p>
<p>a.该模块在登录前不可访问</p>
<p>b.将数据库内存储的信息返回给客户端</p>
<p>4）数据传输模块</p>
<p>a.从访问的URL中获取username</p>
<p>b.生成新的socket ，在线用户数量增加，并将整个类存储到websocketset集合里</p>
<p>c.实现onOpen函数，客户端发起连接请求时调用，返回连接成功</p>
<p>d.实现onMessage函数，用来获取某个客户端传来的信息。</p>
<p>e.实现sendMessage函数，将消息传给指定用户</p>
<p>f.实现sendAll函数，将消息传给所有在线的用户</p>
<p>g.实现tojson函数，将map转化为字符串类型再进行传输</p>
<h1 id="三、系统测试"><a href="#三、系统测试" class="headerlink" title="三、系统测试"></a>三、系统测试</h1><p>各功能测试用例（输入是什么，预期输出是什么），测试结果（贴运行图），结果分析（实际运行结果与预期输出比对，分析结果正确性）</p>
<p>1）导航栏、</p>
<p>登录前：</p>
<p><img src="010.jpg" alt="img"></p>
<p>登录后：</p>
<p><img src="011.jpg" alt="img"></p>
<p>2）用户注册及报错页面</p>
<p><img src="012.jpg" alt="img"> <img src="013.jpg" alt="img"></p>
<p>注册成功，后台显示及数据库存储：</p>
<p><img src="014.jpg" alt="img"></p>
<p><img src="015.jpg" alt="img"></p>
<p>前端直接跳转到登录界面：</p>
<p><img src="016.jpg" alt="img"></p>
<p>3）用户登录成功后台显示</p>
<p><img src="017.jpg" alt="img"></p>
<p>前端跳转到个人界面，每位用户有单独的URL</p>
<p><img src="018.jpg" alt="img"></p>
<p>发布帖子到个人主页，新发布的帖子在最上方</p>
<p><img src="019.jpg" alt="img"></p>
<p>4）登录后可查看好友列表，同时，鼠标放到卡片上会有悬浮效果</p>
<p><img src="020.jpg" alt="img"></p>
<p>点击进去可以看到个人主页，访问别人的主页没有发布帖子的模块</p>
<p><img src="021.jpg" alt="img"></p>
<p>5）聊天室界面，该界面为自适应界面，可以适应不同的宽窄，</p>
<p><img src="022.jpg" alt="img"></p>
<p><img src="023.jpg" alt="img"></p>
<p>聊天效果</p>
<p>别人发送的在左边，自己发送的在右边</p>
<p><img src="024.jpg" alt="img"></p>
<p>因为将JWT存到了浏览器里，所以在一台电脑上登录三个账号，需要三个浏览器。</p>
<p><img src="025.jpg" alt="img"></p>
<p>实现了侧方滚动条，可以聊和多。</p>
<p><img src="026.jpg" alt="img"></p>
<p>默认为群聊，私聊只需在前面加上要私聊的对象例如： test:你好呀！，就会私发给test用户，其他用户看不到。</p>
<p>发送文件：</p>
<p>点击选择文件，跳出对话框</p>
<p><img src="027.jpg" alt="img"></p>
<p>选择后点击上传</p>
<p><img src="028.jpg" alt="img"></p>
<p>预期效果和运行效果一致，实现了最开始设计地的大部分功能，个别功能因为时间原因没有实现，例如关注模块，粉丝数，以及个人头像上传等。</p>
<h1 id="四、课程设计总结"><a href="#四、课程设计总结" class="headerlink" title="四、课程设计总结"></a>四、课程设计总结</h1><p>对所做工作的总体总结：包括最终实现了哪些系统功能，使用了哪些Java编程技术、课程设计过程中遇到的问题(具体问题)、问题的解决以及收获</p>
<p>1）功能：</p>
<p>a.登录、注册，实现了JWT验证，并可将用户信息加密存储</p>
<p>b.个人主页发布帖子功能。</p>
<p>c.好友列表功能，可浏览其他人的主页</p>
<p>d.聊天室功能，包括私聊，群聊，文件传输。</p>
<p>2）技术：</p>
<p>a.基于Socket套接字的网络编程。</p>
<p>b.基于SpringBoot框架的后端实现</p>
<p>c. 基于Vue 架构的前端实现</p>
<p>d. 实现前后端分离</p>
<p>e. JWT 验证</p>
<p>f. 基于架构的MySQL数据库 的对接</p>
<p>3）遇到的问题</p>
<p>a.无从下手阶段，最一开始就想给聊天室写一个前端，但是对于前后端的的知识储备为 0 ，完全不知道从哪里开始。索性就直接看了一周网课，包括SpringBoot框架，和Vue架构。</p>
<p>利用所学的知识写了一些简单的功能后，以为聊天室可以信手拈来，一写才发现，自己学那些前后端的交接方式和课程要求的Socket 编程不是一回事，在vue的Socket传输和用Java写客户端的方式完全不一样，又花了两天时间，大概了解了 vue和springboot 的socket都是怎么用的，至此项目终于可以开始了。</p>
<p>​    b.首先是前后端分离，遇到了跨域问题，通过在前端和后端分别增加配置文件解决问题。</p>
<p>​    c.数据库无法访问，后发现，定义的列名中有大写字母，在SpringBoot的Pojo层是分大小写的，但是在MySQL里面大小写不敏感，就导致了无法访问，修改Pojo层变量名后解决问题。</p>
<p>​    d.用java写的客户端可以通过socket连上后端，但是用Vue的socketIO 始终连接不上，后不用Socketio，改用websocket 连接成功。</p>
<p>​    e.不知道如何在springboot里面实现，多线程，发送消息可以互不影响，一开始想的是在Controller里再写一个客户端，然后就可以和老师给的模板那样，实现一个多线程编程，然后前端Vue在来访问java客户端，java客户端进行socket数据传输后，再返回给前端，后来发现，Springboot本身自带一个类似于多线程的功能，本身就是可以接受很多个客户端的同时访问的，问题就自动化解了。</p>
<p>4）收获</p>
<p>a.虽然本次项目的重点应该在Java本身，但是一开始学Vue和SpringBoot的时候就已然走偏了，但终究历经千辛万苦，把所学的东西可以运用到这次项目里真的很有成就感。</p>
<p>b.对java的知识，尤其是socket 网络编程，十分熟悉了，虽然最终的呈现里，没有完完全全用java写socket，但是在项目的最一开始，反复写了很多遍简易版的Server和Center ，经反复实践，发现确实不能通过这个方式放到Springboot里，才更换思路，但是此时已经对socket理解更进一层了，为后面用别的工具写socket提供了帮助。</p>
<p>c.这个项目真的写了很久，也真的收获了太多，不仅仅是Java的知识，而是打开了一扇新世界的大门，作为自己的第一个项目，希望日后可以慢慢完善，当做自己学习前后端知识的log吧。</p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>course</tag>
        <tag>report</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将网络视频中的音频上传音乐播放器</title>
    <url>/Jmins0.github.io/2023/11/12/%E6%9C%AC%E5%9C%B0%E9%9F%B3%E9%A2%91%E4%B8%8A%E4%BC%A0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<h2 id="1-通过网站获取相应音频文件MP3格式"><a href="#1-通过网站获取相应音频文件MP3格式" class="headerlink" title="1.通过网站获取相应音频文件MP3格式"></a>1.通过网站获取相应音频文件MP3格式</h2><p><code>https://www.hotbox.fun/profile</code></p>
<span id="more"></span>

<h2 id="2-对音频文件进行裁剪（根据需求）"><a href="#2-对音频文件进行裁剪（根据需求）" class="headerlink" title="2. 对音频文件进行裁剪（根据需求）"></a>2. 对音频文件进行裁剪（根据需求）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crop_mp3</span>(<span class="params">input_path, output_path, start_time, end_time</span>):</span><br><span class="line">    <span class="comment"># 加载MP3文件</span></span><br><span class="line">    audio = AudioSegment.from_mp3(input_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算裁剪的开始和结束时间（以毫秒为单位）</span></span><br><span class="line">    start_ms = start_time * <span class="number">1000</span></span><br><span class="line">    end_ms = end_time * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 裁剪音频</span></span><br><span class="line">    cropped_audio = audio[start_ms:end_ms]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存裁剪后的音频文件</span></span><br><span class="line">    cropped_audio.export(output_path, <span class="built_in">format</span>=<span class="string">&quot;mp3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入文件路径</span></span><br><span class="line">input_file = <span class="string">&quot;input.mp3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出文件路径</span></span><br><span class="line">output_file = <span class="string">&quot;output.mp3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 裁剪的开始时间和结束时间（以秒为单位）</span></span><br><span class="line">start_time = <span class="number">30</span>  <span class="comment"># 从第30秒开始</span></span><br><span class="line">end_time = <span class="number">60</span>    <span class="comment"># 到第60秒结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行裁剪操作</span></span><br><span class="line">crop_mp3(input_file, output_file, start_time, end_time)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-给MP3文件打标签，增加歌手、专辑、封面图片等信息"><a href="#3-给MP3文件打标签，增加歌手、专辑、封面图片等信息" class="headerlink" title="3. 给MP3文件打标签，增加歌手、专辑、封面图片等信息"></a>3. 给MP3文件打标签，增加歌手、专辑、封面图片等信息</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> eyed3</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_mp3_tags</span>(<span class="params">file_path, title, artist, album, year, genre, lyrics,image_file</span>):</span><br><span class="line">    audiofile = eyed3.load(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置标签信息</span></span><br><span class="line">    audiofile.tag.title = title</span><br><span class="line">    audiofile.tag.artist = artist</span><br><span class="line">    audiofile.tag.album = album</span><br><span class="line">    audiofile.tag.release_date = year</span><br><span class="line">    audiofile.tag.genre = genre</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取图片文件的二进制数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(image_file, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> image:</span><br><span class="line">        image_data = image.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置封面</span></span><br><span class="line">    audiofile.tag.images.<span class="built_in">set</span>(<span class="number">3</span>, image_data, <span class="string">&quot;image/jpeg&quot;</span>, <span class="string">u&quot;Description&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存更改</span></span><br><span class="line">    audiofile.tag.save()</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&quot;music.mp3&quot;</span></span><br><span class="line">image_file_path = <span class="string">&quot;cover.jpg&quot;</span></span><br><span class="line">title = <span class="string">&quot;title&quot;</span></span><br><span class="line">artist = <span class="string">&quot;artist&quot;</span></span><br><span class="line">album = <span class="string">&quot;live&quot;</span></span><br><span class="line">year = <span class="string">&quot;2023&quot;</span></span><br><span class="line">genre = <span class="string">&quot;Pop&quot;</span></span><br><span class="line"></span><br><span class="line">edit_mp3_tags(file_path, title, artist, album, year, genre, lyrics,image_file_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4、通过网站生成歌词文件"><a href="#4、通过网站生成歌词文件" class="headerlink" title="4、通过网站生成歌词文件"></a>4、通过网站生成歌词文件</h2><p><code>https://lrcgenerator.com/</code></p>
<p>将生成的歌词文件和MP3文件放在同一个文件夹，同时保证除了后缀名不同，其他保持一致。</p>
<h2 id="5-上传音乐播放器"><a href="#5-上传音乐播放器" class="headerlink" title="5.上传音乐播放器"></a>5.上传音乐播放器</h2><p>以网易云为例：直接通过“我的音乐云盘”上传，不能通过“本地与下载”上传，会出现播放其他音源的错误。</p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
</search>
